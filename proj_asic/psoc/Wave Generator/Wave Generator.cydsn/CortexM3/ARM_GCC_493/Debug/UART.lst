ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"UART.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.UART_Init,"ax",%progbits
  19              		.align	2
  20              		.global	UART_Init
  21              		.thumb
  22              		.thumb_func
  23              		.type	UART_Init, %function
  24              	UART_Init:
  25              	.LFB1:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\UART.c"
   1:.\Generated_Source\PSoC5/UART.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/UART.c **** * File Name: UART.c
   3:.\Generated_Source\PSoC5/UART.c **** * Version 2.50
   4:.\Generated_Source\PSoC5/UART.c **** *
   5:.\Generated_Source\PSoC5/UART.c **** * Description:
   6:.\Generated_Source\PSoC5/UART.c **** *  This file provides all API functionality of the UART component
   7:.\Generated_Source\PSoC5/UART.c **** *
   8:.\Generated_Source\PSoC5/UART.c **** * Note:
   9:.\Generated_Source\PSoC5/UART.c **** *
  10:.\Generated_Source\PSoC5/UART.c **** ********************************************************************************
  11:.\Generated_Source\PSoC5/UART.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC5/UART.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:.\Generated_Source\PSoC5/UART.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:.\Generated_Source\PSoC5/UART.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC5/UART.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC5/UART.c **** 
  17:.\Generated_Source\PSoC5/UART.c **** #include "UART.h"
  18:.\Generated_Source\PSoC5/UART.c **** #if (UART_INTERNAL_CLOCK_USED)
  19:.\Generated_Source\PSoC5/UART.c ****     #include "UART_IntClock.h"
  20:.\Generated_Source\PSoC5/UART.c **** #endif /* End UART_INTERNAL_CLOCK_USED */
  21:.\Generated_Source\PSoC5/UART.c **** 
  22:.\Generated_Source\PSoC5/UART.c **** 
  23:.\Generated_Source\PSoC5/UART.c **** /***************************************
  24:.\Generated_Source\PSoC5/UART.c **** * Global data allocation
  25:.\Generated_Source\PSoC5/UART.c **** ***************************************/
  26:.\Generated_Source\PSoC5/UART.c **** 
  27:.\Generated_Source\PSoC5/UART.c **** uint8 UART_initVar = 0u;
  28:.\Generated_Source\PSoC5/UART.c **** 
  29:.\Generated_Source\PSoC5/UART.c **** #if (UART_TX_INTERRUPT_ENABLED && UART_TX_ENABLED)
  30:.\Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_txBuffer[UART_TX_BUFFER_SIZE];
  31:.\Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_txBufferRead = 0u;
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 2


  32:.\Generated_Source\PSoC5/UART.c ****     uint8 UART_txBufferWrite = 0u;
  33:.\Generated_Source\PSoC5/UART.c **** #endif /* (UART_TX_INTERRUPT_ENABLED && UART_TX_ENABLED) */
  34:.\Generated_Source\PSoC5/UART.c **** 
  35:.\Generated_Source\PSoC5/UART.c **** #if (UART_RX_INTERRUPT_ENABLED && (UART_RX_ENABLED || UART_HD_ENABLED))
  36:.\Generated_Source\PSoC5/UART.c ****     uint8 UART_errorStatus = 0u;
  37:.\Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBuffer[UART_RX_BUFFER_SIZE];
  38:.\Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBufferRead  = 0u;
  39:.\Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBufferWrite = 0u;
  40:.\Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBufferLoopDetect = 0u;
  41:.\Generated_Source\PSoC5/UART.c ****     volatile uint8 UART_rxBufferOverflow   = 0u;
  42:.\Generated_Source\PSoC5/UART.c ****     #if (UART_RXHW_ADDRESS_ENABLED)
  43:.\Generated_Source\PSoC5/UART.c ****         volatile uint8 UART_rxAddressMode = UART_RX_ADDRESS_MODE;
  44:.\Generated_Source\PSoC5/UART.c ****         volatile uint8 UART_rxAddressDetected = 0u;
  45:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RXHW_ADDRESS_ENABLED) */
  46:.\Generated_Source\PSoC5/UART.c **** #endif /* (UART_RX_INTERRUPT_ENABLED && (UART_RX_ENABLED || UART_HD_ENABLED)) */
  47:.\Generated_Source\PSoC5/UART.c **** 
  48:.\Generated_Source\PSoC5/UART.c **** 
  49:.\Generated_Source\PSoC5/UART.c **** /*******************************************************************************
  50:.\Generated_Source\PSoC5/UART.c **** * Function Name: UART_Start
  51:.\Generated_Source\PSoC5/UART.c **** ********************************************************************************
  52:.\Generated_Source\PSoC5/UART.c **** *
  53:.\Generated_Source\PSoC5/UART.c **** * Summary:
  54:.\Generated_Source\PSoC5/UART.c **** *  This is the preferred method to begin component operation.
  55:.\Generated_Source\PSoC5/UART.c **** *  UART_Start() sets the initVar variable, calls the
  56:.\Generated_Source\PSoC5/UART.c **** *  UART_Init() function, and then calls the
  57:.\Generated_Source\PSoC5/UART.c **** *  UART_Enable() function.
  58:.\Generated_Source\PSoC5/UART.c **** *
  59:.\Generated_Source\PSoC5/UART.c **** * Parameters:
  60:.\Generated_Source\PSoC5/UART.c **** *  None.
  61:.\Generated_Source\PSoC5/UART.c **** *
  62:.\Generated_Source\PSoC5/UART.c **** * Return:
  63:.\Generated_Source\PSoC5/UART.c **** *  None.
  64:.\Generated_Source\PSoC5/UART.c **** *
  65:.\Generated_Source\PSoC5/UART.c **** * Global variables:
  66:.\Generated_Source\PSoC5/UART.c **** *  The UART_intiVar variable is used to indicate initial
  67:.\Generated_Source\PSoC5/UART.c **** *  configuration of this component. The variable is initialized to zero (0u)
  68:.\Generated_Source\PSoC5/UART.c **** *  and set to one (1u) the first time UART_Start() is called. This
  69:.\Generated_Source\PSoC5/UART.c **** *  allows for component initialization without re-initialization in all
  70:.\Generated_Source\PSoC5/UART.c **** *  subsequent calls to the UART_Start() routine.
  71:.\Generated_Source\PSoC5/UART.c **** *
  72:.\Generated_Source\PSoC5/UART.c **** * Reentrant:
  73:.\Generated_Source\PSoC5/UART.c **** *  No.
  74:.\Generated_Source\PSoC5/UART.c **** *
  75:.\Generated_Source\PSoC5/UART.c **** *******************************************************************************/
  76:.\Generated_Source\PSoC5/UART.c **** void UART_Start(void) 
  77:.\Generated_Source\PSoC5/UART.c **** {
  78:.\Generated_Source\PSoC5/UART.c ****     /* If not initialized then initialize all required hardware and software */
  79:.\Generated_Source\PSoC5/UART.c ****     if(UART_initVar == 0u)
  80:.\Generated_Source\PSoC5/UART.c ****     {
  81:.\Generated_Source\PSoC5/UART.c ****         UART_Init();
  82:.\Generated_Source\PSoC5/UART.c ****         UART_initVar = 1u;
  83:.\Generated_Source\PSoC5/UART.c ****     }
  84:.\Generated_Source\PSoC5/UART.c **** 
  85:.\Generated_Source\PSoC5/UART.c ****     UART_Enable();
  86:.\Generated_Source\PSoC5/UART.c **** }
  87:.\Generated_Source\PSoC5/UART.c **** 
  88:.\Generated_Source\PSoC5/UART.c **** 
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 3


  89:.\Generated_Source\PSoC5/UART.c **** /*******************************************************************************
  90:.\Generated_Source\PSoC5/UART.c **** * Function Name: UART_Init
  91:.\Generated_Source\PSoC5/UART.c **** ********************************************************************************
  92:.\Generated_Source\PSoC5/UART.c **** *
  93:.\Generated_Source\PSoC5/UART.c **** * Summary:
  94:.\Generated_Source\PSoC5/UART.c **** *  Initializes or restores the component according to the customizer Configure
  95:.\Generated_Source\PSoC5/UART.c **** *  dialog settings. It is not necessary to call UART_Init() because
  96:.\Generated_Source\PSoC5/UART.c **** *  the UART_Start() API calls this function and is the preferred
  97:.\Generated_Source\PSoC5/UART.c **** *  method to begin component operation.
  98:.\Generated_Source\PSoC5/UART.c **** *
  99:.\Generated_Source\PSoC5/UART.c **** * Parameters:
 100:.\Generated_Source\PSoC5/UART.c **** *  None.
 101:.\Generated_Source\PSoC5/UART.c **** *
 102:.\Generated_Source\PSoC5/UART.c **** * Return:
 103:.\Generated_Source\PSoC5/UART.c **** *  None.
 104:.\Generated_Source\PSoC5/UART.c **** *
 105:.\Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 106:.\Generated_Source\PSoC5/UART.c **** void UART_Init(void) 
 107:.\Generated_Source\PSoC5/UART.c **** {
  27              		.loc 1 107 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 108:.\Generated_Source\PSoC5/UART.c ****     #if(UART_RX_ENABLED || UART_HD_ENABLED)
 109:.\Generated_Source\PSoC5/UART.c **** 
 110:.\Generated_Source\PSoC5/UART.c ****         #if (UART_RX_INTERRUPT_ENABLED)
 111:.\Generated_Source\PSoC5/UART.c ****             /* Set RX interrupt vector and priority */
 112:.\Generated_Source\PSoC5/UART.c ****             (void) CyIntSetVector(UART_RX_VECT_NUM, &UART_RXISR);
 113:.\Generated_Source\PSoC5/UART.c ****             CyIntSetPriority(UART_RX_VECT_NUM, UART_RX_PRIOR_NUM);
 114:.\Generated_Source\PSoC5/UART.c ****             UART_errorStatus = 0u;
 115:.\Generated_Source\PSoC5/UART.c ****         #endif /* (UART_RX_INTERRUPT_ENABLED) */
 116:.\Generated_Source\PSoC5/UART.c **** 
 117:.\Generated_Source\PSoC5/UART.c ****         #if (UART_RXHW_ADDRESS_ENABLED)
 118:.\Generated_Source\PSoC5/UART.c ****             UART_SetRxAddressMode(UART_RX_ADDRESS_MODE);
 119:.\Generated_Source\PSoC5/UART.c ****             UART_SetRxAddress1(UART_RX_HW_ADDRESS1);
 120:.\Generated_Source\PSoC5/UART.c ****             UART_SetRxAddress2(UART_RX_HW_ADDRESS2);
 121:.\Generated_Source\PSoC5/UART.c ****         #endif /* End UART_RXHW_ADDRESS_ENABLED */
 122:.\Generated_Source\PSoC5/UART.c **** 
 123:.\Generated_Source\PSoC5/UART.c ****         /* Init Count7 period */
 124:.\Generated_Source\PSoC5/UART.c ****         UART_RXBITCTR_PERIOD_REG = UART_RXBITCTR_INIT;
 125:.\Generated_Source\PSoC5/UART.c ****         /* Configure the Initial RX interrupt mask */
 126:.\Generated_Source\PSoC5/UART.c ****         UART_RXSTATUS_MASK_REG  = UART_INIT_RX_INTERRUPTS_MASK;
 127:.\Generated_Source\PSoC5/UART.c ****     #endif /* End UART_RX_ENABLED || UART_HD_ENABLED*/
 128:.\Generated_Source\PSoC5/UART.c **** 
 129:.\Generated_Source\PSoC5/UART.c ****     #if(UART_TX_ENABLED)
 130:.\Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 131:.\Generated_Source\PSoC5/UART.c ****             /* Set TX interrupt vector and priority */
 132:.\Generated_Source\PSoC5/UART.c ****             (void) CyIntSetVector(UART_TX_VECT_NUM, &UART_TXISR);
 133:.\Generated_Source\PSoC5/UART.c ****             CyIntSetPriority(UART_TX_VECT_NUM, UART_TX_PRIOR_NUM);
 134:.\Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_INTERRUPT_ENABLED) */
 135:.\Generated_Source\PSoC5/UART.c **** 
 136:.\Generated_Source\PSoC5/UART.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 137:.\Generated_Source\PSoC5/UART.c ****         #if (UART_TXCLKGEN_DP)
 138:.\Generated_Source\PSoC5/UART.c ****             UART_TXBITCLKGEN_CTR_REG = UART_BIT_CENTER;
  32              		.loc 1 138 0
  33 0000 0622     		movs	r2, #6
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 4


  34 0002 044B     		ldr	r3, .L2
  35 0004 1A70     		strb	r2, [r3]
 139:.\Generated_Source\PSoC5/UART.c ****             UART_TXBITCLKTX_COMPLETE_REG = ((UART_NUMBER_OF_DATA_BITS +
  36              		.loc 1 139 0
  37 0006 4722     		movs	r2, #71
  38 0008 1033     		adds	r3, r3, #16
  39 000a 1A70     		strb	r2, [r3]
 140:.\Generated_Source\PSoC5/UART.c ****                         UART_NUMBER_OF_START_BIT) * UART_OVER_SAMPLE_COUNT) - 1u;
 141:.\Generated_Source\PSoC5/UART.c ****         #else
 142:.\Generated_Source\PSoC5/UART.c ****             UART_TXBITCTR_PERIOD_REG = ((UART_NUMBER_OF_DATA_BITS +
 143:.\Generated_Source\PSoC5/UART.c ****                         UART_NUMBER_OF_START_BIT) * UART_OVER_SAMPLE_8) - 1u;
 144:.\Generated_Source\PSoC5/UART.c ****         #endif /* End UART_TXCLKGEN_DP */
 145:.\Generated_Source\PSoC5/UART.c **** 
 146:.\Generated_Source\PSoC5/UART.c ****         /* Configure the Initial TX interrupt mask */
 147:.\Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 148:.\Generated_Source\PSoC5/UART.c ****             UART_TXSTATUS_MASK_REG = UART_TX_STS_FIFO_EMPTY;
 149:.\Generated_Source\PSoC5/UART.c ****         #else
 150:.\Generated_Source\PSoC5/UART.c ****             UART_TXSTATUS_MASK_REG = UART_INIT_TX_INTERRUPTS_MASK;
  40              		.loc 1 150 0
  41 000c 0022     		movs	r2, #0
  42 000e 5433     		adds	r3, r3, #84
  43 0010 1A70     		strb	r2, [r3]
  44 0012 7047     		bx	lr
  45              	.L3:
  46              		.align	2
  47              	.L2:
  48 0014 20640040 		.word	1073767456
  49              		.cfi_endproc
  50              	.LFE1:
  51              		.size	UART_Init, .-UART_Init
  52              		.section	.text.UART_Enable,"ax",%progbits
  53              		.align	2
  54              		.global	UART_Enable
  55              		.thumb
  56              		.thumb_func
  57              		.type	UART_Enable, %function
  58              	UART_Enable:
  59              	.LFB2:
 151:.\Generated_Source\PSoC5/UART.c ****         #endif /*End UART_TX_INTERRUPT_ENABLED*/
 152:.\Generated_Source\PSoC5/UART.c **** 
 153:.\Generated_Source\PSoC5/UART.c ****     #endif /* End UART_TX_ENABLED */
 154:.\Generated_Source\PSoC5/UART.c **** 
 155:.\Generated_Source\PSoC5/UART.c ****     #if(UART_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 156:.\Generated_Source\PSoC5/UART.c ****         UART_WriteControlRegister( \
 157:.\Generated_Source\PSoC5/UART.c ****             (UART_ReadControlRegister() & (uint8)~UART_CTRL_PARITY_TYPE_MASK) | \
 158:.\Generated_Source\PSoC5/UART.c ****             (uint8)(UART_PARITY_TYPE << UART_CTRL_PARITY_TYPE0_SHIFT) );
 159:.\Generated_Source\PSoC5/UART.c ****     #endif /* End UART_PARITY_TYPE_SW */
 160:.\Generated_Source\PSoC5/UART.c **** }
 161:.\Generated_Source\PSoC5/UART.c **** 
 162:.\Generated_Source\PSoC5/UART.c **** 
 163:.\Generated_Source\PSoC5/UART.c **** /*******************************************************************************
 164:.\Generated_Source\PSoC5/UART.c **** * Function Name: UART_Enable
 165:.\Generated_Source\PSoC5/UART.c **** ********************************************************************************
 166:.\Generated_Source\PSoC5/UART.c **** *
 167:.\Generated_Source\PSoC5/UART.c **** * Summary:
 168:.\Generated_Source\PSoC5/UART.c **** *  Activates the hardware and begins component operation. It is not necessary
 169:.\Generated_Source\PSoC5/UART.c **** *  to call UART_Enable() because the UART_Start() API
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 5


 170:.\Generated_Source\PSoC5/UART.c **** *  calls this function, which is the preferred method to begin component
 171:.\Generated_Source\PSoC5/UART.c **** *  operation.
 172:.\Generated_Source\PSoC5/UART.c **** 
 173:.\Generated_Source\PSoC5/UART.c **** * Parameters:
 174:.\Generated_Source\PSoC5/UART.c **** *  None.
 175:.\Generated_Source\PSoC5/UART.c **** *
 176:.\Generated_Source\PSoC5/UART.c **** * Return:
 177:.\Generated_Source\PSoC5/UART.c **** *  None.
 178:.\Generated_Source\PSoC5/UART.c **** *
 179:.\Generated_Source\PSoC5/UART.c **** * Global Variables:
 180:.\Generated_Source\PSoC5/UART.c **** *  UART_rxAddressDetected - set to initial state (0).
 181:.\Generated_Source\PSoC5/UART.c **** *
 182:.\Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 183:.\Generated_Source\PSoC5/UART.c **** void UART_Enable(void) 
 184:.\Generated_Source\PSoC5/UART.c **** {
  60              		.loc 1 184 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64 0000 10B5     		push	{r4, lr}
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 4, -8
  67              		.cfi_offset 14, -4
 185:.\Generated_Source\PSoC5/UART.c ****     uint8 enableInterrupts;
 186:.\Generated_Source\PSoC5/UART.c ****     enableInterrupts = CyEnterCriticalSection();
  68              		.loc 1 186 0
  69 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  70              	.LVL0:
  71 0006 0446     		mov	r4, r0
  72              	.LVL1:
 187:.\Generated_Source\PSoC5/UART.c **** 
 188:.\Generated_Source\PSoC5/UART.c ****     #if (UART_RX_ENABLED || UART_HD_ENABLED)
 189:.\Generated_Source\PSoC5/UART.c ****         /* RX Counter (Count7) Enable */
 190:.\Generated_Source\PSoC5/UART.c ****         UART_RXBITCTR_CONTROL_REG |= UART_CNTR_ENABLE;
 191:.\Generated_Source\PSoC5/UART.c **** 
 192:.\Generated_Source\PSoC5/UART.c ****         /* Enable the RX Interrupt */
 193:.\Generated_Source\PSoC5/UART.c ****         UART_RXSTATUS_ACTL_REG  |= UART_INT_ENABLE;
 194:.\Generated_Source\PSoC5/UART.c **** 
 195:.\Generated_Source\PSoC5/UART.c ****         #if (UART_RX_INTERRUPT_ENABLED)
 196:.\Generated_Source\PSoC5/UART.c ****             UART_EnableRxInt();
 197:.\Generated_Source\PSoC5/UART.c **** 
 198:.\Generated_Source\PSoC5/UART.c ****             #if (UART_RXHW_ADDRESS_ENABLED)
 199:.\Generated_Source\PSoC5/UART.c ****                 UART_rxAddressDetected = 0u;
 200:.\Generated_Source\PSoC5/UART.c ****             #endif /* (UART_RXHW_ADDRESS_ENABLED) */
 201:.\Generated_Source\PSoC5/UART.c ****         #endif /* (UART_RX_INTERRUPT_ENABLED) */
 202:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_ENABLED || UART_HD_ENABLED) */
 203:.\Generated_Source\PSoC5/UART.c **** 
 204:.\Generated_Source\PSoC5/UART.c ****     #if(UART_TX_ENABLED)
 205:.\Generated_Source\PSoC5/UART.c ****         /* TX Counter (DP/Count7) Enable */
 206:.\Generated_Source\PSoC5/UART.c ****         #if(!UART_TXCLKGEN_DP)
 207:.\Generated_Source\PSoC5/UART.c ****             UART_TXBITCTR_CONTROL_REG |= UART_CNTR_ENABLE;
 208:.\Generated_Source\PSoC5/UART.c ****         #endif /* End UART_TXCLKGEN_DP */
 209:.\Generated_Source\PSoC5/UART.c **** 
 210:.\Generated_Source\PSoC5/UART.c ****         /* Enable the TX Interrupt */
 211:.\Generated_Source\PSoC5/UART.c ****         UART_TXSTATUS_ACTL_REG |= UART_INT_ENABLE;
  73              		.loc 1 211 0
  74 0008 054A     		ldr	r2, .L6
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 6


  75 000a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  76 000c 43F01003 		orr	r3, r3, #16
  77 0010 1370     		strb	r3, [r2]
 212:.\Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 213:.\Generated_Source\PSoC5/UART.c ****             UART_ClearPendingTxInt(); /* Clear history of TX_NOT_EMPTY */
 214:.\Generated_Source\PSoC5/UART.c ****             UART_EnableTxInt();
 215:.\Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_INTERRUPT_ENABLED) */
 216:.\Generated_Source\PSoC5/UART.c ****      #endif /* (UART_TX_INTERRUPT_ENABLED) */
 217:.\Generated_Source\PSoC5/UART.c **** 
 218:.\Generated_Source\PSoC5/UART.c ****     #if (UART_INTERNAL_CLOCK_USED)
 219:.\Generated_Source\PSoC5/UART.c ****         UART_IntClock_Start();  /* Enable the clock */
  78              		.loc 1 219 0
  79 0012 FFF7FEFF 		bl	UART_IntClock_Start
  80              	.LVL2:
 220:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_INTERNAL_CLOCK_USED) */
 221:.\Generated_Source\PSoC5/UART.c **** 
 222:.\Generated_Source\PSoC5/UART.c ****     CyExitCriticalSection(enableInterrupts);
  81              		.loc 1 222 0
  82 0016 2046     		mov	r0, r4
  83 0018 FFF7FEFF 		bl	CyExitCriticalSection
  84              	.LVL3:
  85 001c 10BD     		pop	{r4, pc}
  86              	.LVL4:
  87              	.L7:
  88 001e 00BF     		.align	2
  89              	.L6:
  90 0020 94640040 		.word	1073767572
  91              		.cfi_endproc
  92              	.LFE2:
  93              		.size	UART_Enable, .-UART_Enable
  94              		.section	.text.UART_Start,"ax",%progbits
  95              		.align	2
  96              		.global	UART_Start
  97              		.thumb
  98              		.thumb_func
  99              		.type	UART_Start, %function
 100              	UART_Start:
 101              	.LFB0:
  77:.\Generated_Source\PSoC5/UART.c ****     /* If not initialized then initialize all required hardware and software */
 102              		.loc 1 77 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106 0000 08B5     		push	{r3, lr}
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 3, -8
 109              		.cfi_offset 14, -4
  79:.\Generated_Source\PSoC5/UART.c ****     {
 110              		.loc 1 79 0
 111 0002 054B     		ldr	r3, .L11
 112 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 113 0006 23B9     		cbnz	r3, .L9
  81:.\Generated_Source\PSoC5/UART.c ****         UART_initVar = 1u;
 114              		.loc 1 81 0
 115 0008 FFF7FEFF 		bl	UART_Init
 116              	.LVL5:
  82:.\Generated_Source\PSoC5/UART.c ****     }
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 7


 117              		.loc 1 82 0
 118 000c 0122     		movs	r2, #1
 119 000e 024B     		ldr	r3, .L11
 120 0010 1A70     		strb	r2, [r3]
 121              	.L9:
  85:.\Generated_Source\PSoC5/UART.c **** }
 122              		.loc 1 85 0
 123 0012 FFF7FEFF 		bl	UART_Enable
 124              	.LVL6:
 125 0016 08BD     		pop	{r3, pc}
 126              	.L12:
 127              		.align	2
 128              	.L11:
 129 0018 00000000 		.word	.LANCHOR0
 130              		.cfi_endproc
 131              	.LFE0:
 132              		.size	UART_Start, .-UART_Start
 133              		.section	.text.UART_Stop,"ax",%progbits
 134              		.align	2
 135              		.global	UART_Stop
 136              		.thumb
 137              		.thumb_func
 138              		.type	UART_Stop, %function
 139              	UART_Stop:
 140              	.LFB3:
 223:.\Generated_Source\PSoC5/UART.c **** }
 224:.\Generated_Source\PSoC5/UART.c **** 
 225:.\Generated_Source\PSoC5/UART.c **** 
 226:.\Generated_Source\PSoC5/UART.c **** /*******************************************************************************
 227:.\Generated_Source\PSoC5/UART.c **** * Function Name: UART_Stop
 228:.\Generated_Source\PSoC5/UART.c **** ********************************************************************************
 229:.\Generated_Source\PSoC5/UART.c **** *
 230:.\Generated_Source\PSoC5/UART.c **** * Summary:
 231:.\Generated_Source\PSoC5/UART.c **** *  Disables the UART operation.
 232:.\Generated_Source\PSoC5/UART.c **** *
 233:.\Generated_Source\PSoC5/UART.c **** * Parameters:
 234:.\Generated_Source\PSoC5/UART.c **** *  None.
 235:.\Generated_Source\PSoC5/UART.c **** *
 236:.\Generated_Source\PSoC5/UART.c **** * Return:
 237:.\Generated_Source\PSoC5/UART.c **** *  None.
 238:.\Generated_Source\PSoC5/UART.c **** *
 239:.\Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 240:.\Generated_Source\PSoC5/UART.c **** void UART_Stop(void) 
 241:.\Generated_Source\PSoC5/UART.c **** {
 141              		.loc 1 241 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145 0000 10B5     		push	{r4, lr}
 146              		.cfi_def_cfa_offset 8
 147              		.cfi_offset 4, -8
 148              		.cfi_offset 14, -4
 242:.\Generated_Source\PSoC5/UART.c ****     uint8 enableInterrupts;
 243:.\Generated_Source\PSoC5/UART.c ****     enableInterrupts = CyEnterCriticalSection();
 149              		.loc 1 243 0
 150 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 151              	.LVL7:
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 8


 152 0006 0446     		mov	r4, r0
 153              	.LVL8:
 244:.\Generated_Source\PSoC5/UART.c **** 
 245:.\Generated_Source\PSoC5/UART.c ****     /* Write Bit Counter Disable */
 246:.\Generated_Source\PSoC5/UART.c ****     #if (UART_RX_ENABLED || UART_HD_ENABLED)
 247:.\Generated_Source\PSoC5/UART.c ****         UART_RXBITCTR_CONTROL_REG &= (uint8) ~UART_CNTR_ENABLE;
 248:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_ENABLED || UART_HD_ENABLED) */
 249:.\Generated_Source\PSoC5/UART.c **** 
 250:.\Generated_Source\PSoC5/UART.c ****     #if (UART_TX_ENABLED)
 251:.\Generated_Source\PSoC5/UART.c ****         #if(!UART_TXCLKGEN_DP)
 252:.\Generated_Source\PSoC5/UART.c ****             UART_TXBITCTR_CONTROL_REG &= (uint8) ~UART_CNTR_ENABLE;
 253:.\Generated_Source\PSoC5/UART.c ****         #endif /* (!UART_TXCLKGEN_DP) */
 254:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_TX_ENABLED) */
 255:.\Generated_Source\PSoC5/UART.c **** 
 256:.\Generated_Source\PSoC5/UART.c ****     #if (UART_INTERNAL_CLOCK_USED)
 257:.\Generated_Source\PSoC5/UART.c ****         UART_IntClock_Stop();   /* Disable the clock */
 154              		.loc 1 257 0
 155 0008 FFF7FEFF 		bl	UART_IntClock_Stop
 156              	.LVL9:
 258:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_INTERNAL_CLOCK_USED) */
 259:.\Generated_Source\PSoC5/UART.c **** 
 260:.\Generated_Source\PSoC5/UART.c ****     /* Disable internal interrupt component */
 261:.\Generated_Source\PSoC5/UART.c ****     #if (UART_RX_ENABLED || UART_HD_ENABLED)
 262:.\Generated_Source\PSoC5/UART.c ****         UART_RXSTATUS_ACTL_REG  &= (uint8) ~UART_INT_ENABLE;
 263:.\Generated_Source\PSoC5/UART.c **** 
 264:.\Generated_Source\PSoC5/UART.c ****         #if (UART_RX_INTERRUPT_ENABLED)
 265:.\Generated_Source\PSoC5/UART.c ****             UART_DisableRxInt();
 266:.\Generated_Source\PSoC5/UART.c ****         #endif /* (UART_RX_INTERRUPT_ENABLED) */
 267:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_ENABLED || UART_HD_ENABLED) */
 268:.\Generated_Source\PSoC5/UART.c **** 
 269:.\Generated_Source\PSoC5/UART.c ****     #if (UART_TX_ENABLED)
 270:.\Generated_Source\PSoC5/UART.c ****         UART_TXSTATUS_ACTL_REG &= (uint8) ~UART_INT_ENABLE;
 157              		.loc 1 270 0
 158 000c 044A     		ldr	r2, .L15
 159 000e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 160 0010 03F0EF03 		and	r3, r3, #239
 161 0014 1370     		strb	r3, [r2]
 271:.\Generated_Source\PSoC5/UART.c **** 
 272:.\Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 273:.\Generated_Source\PSoC5/UART.c ****             UART_DisableTxInt();
 274:.\Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_INTERRUPT_ENABLED) */
 275:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_TX_ENABLED) */
 276:.\Generated_Source\PSoC5/UART.c **** 
 277:.\Generated_Source\PSoC5/UART.c ****     CyExitCriticalSection(enableInterrupts);
 162              		.loc 1 277 0
 163 0016 2046     		mov	r0, r4
 164 0018 FFF7FEFF 		bl	CyExitCriticalSection
 165              	.LVL10:
 166 001c 10BD     		pop	{r4, pc}
 167              	.LVL11:
 168              	.L16:
 169 001e 00BF     		.align	2
 170              	.L15:
 171 0020 94640040 		.word	1073767572
 172              		.cfi_endproc
 173              	.LFE3:
 174              		.size	UART_Stop, .-UART_Stop
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 9


 175              		.section	.text.UART_ReadControlRegister,"ax",%progbits
 176              		.align	2
 177              		.global	UART_ReadControlRegister
 178              		.thumb
 179              		.thumb_func
 180              		.type	UART_ReadControlRegister, %function
 181              	UART_ReadControlRegister:
 182              	.LFB4:
 278:.\Generated_Source\PSoC5/UART.c **** }
 279:.\Generated_Source\PSoC5/UART.c **** 
 280:.\Generated_Source\PSoC5/UART.c **** 
 281:.\Generated_Source\PSoC5/UART.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC5/UART.c **** * Function Name: UART_ReadControlRegister
 283:.\Generated_Source\PSoC5/UART.c **** ********************************************************************************
 284:.\Generated_Source\PSoC5/UART.c **** *
 285:.\Generated_Source\PSoC5/UART.c **** * Summary:
 286:.\Generated_Source\PSoC5/UART.c **** *  Returns the current value of the control register.
 287:.\Generated_Source\PSoC5/UART.c **** *
 288:.\Generated_Source\PSoC5/UART.c **** * Parameters:
 289:.\Generated_Source\PSoC5/UART.c **** *  None.
 290:.\Generated_Source\PSoC5/UART.c **** *
 291:.\Generated_Source\PSoC5/UART.c **** * Return:
 292:.\Generated_Source\PSoC5/UART.c **** *  Contents of the control register.
 293:.\Generated_Source\PSoC5/UART.c **** *
 294:.\Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC5/UART.c **** uint8 UART_ReadControlRegister(void) 
 296:.\Generated_Source\PSoC5/UART.c **** {
 183              		.loc 1 296 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 297:.\Generated_Source\PSoC5/UART.c ****     #if (UART_CONTROL_REG_REMOVED)
 298:.\Generated_Source\PSoC5/UART.c ****         return(0u);
 299:.\Generated_Source\PSoC5/UART.c ****     #else
 300:.\Generated_Source\PSoC5/UART.c ****         return(UART_CONTROL_REG);
 301:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_CONTROL_REG_REMOVED) */
 302:.\Generated_Source\PSoC5/UART.c **** }
 188              		.loc 1 302 0
 189 0000 0020     		movs	r0, #0
 190 0002 7047     		bx	lr
 191              		.cfi_endproc
 192              	.LFE4:
 193              		.size	UART_ReadControlRegister, .-UART_ReadControlRegister
 194              		.section	.text.UART_WriteControlRegister,"ax",%progbits
 195              		.align	2
 196              		.global	UART_WriteControlRegister
 197              		.thumb
 198              		.thumb_func
 199              		.type	UART_WriteControlRegister, %function
 200              	UART_WriteControlRegister:
 201              	.LFB5:
 303:.\Generated_Source\PSoC5/UART.c **** 
 304:.\Generated_Source\PSoC5/UART.c **** 
 305:.\Generated_Source\PSoC5/UART.c **** /*******************************************************************************
 306:.\Generated_Source\PSoC5/UART.c **** * Function Name: UART_WriteControlRegister
 307:.\Generated_Source\PSoC5/UART.c **** ********************************************************************************
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 10


 308:.\Generated_Source\PSoC5/UART.c **** *
 309:.\Generated_Source\PSoC5/UART.c **** * Summary:
 310:.\Generated_Source\PSoC5/UART.c **** *  Writes an 8-bit value into the control register
 311:.\Generated_Source\PSoC5/UART.c **** *
 312:.\Generated_Source\PSoC5/UART.c **** * Parameters:
 313:.\Generated_Source\PSoC5/UART.c **** *  control:  control register value
 314:.\Generated_Source\PSoC5/UART.c **** *
 315:.\Generated_Source\PSoC5/UART.c **** * Return:
 316:.\Generated_Source\PSoC5/UART.c **** *  None.
 317:.\Generated_Source\PSoC5/UART.c **** *
 318:.\Generated_Source\PSoC5/UART.c **** *******************************************************************************/
 319:.\Generated_Source\PSoC5/UART.c **** void  UART_WriteControlRegister(uint8 control) 
 320:.\Generated_Source\PSoC5/UART.c **** {
 202              		.loc 1 320 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206              		@ link register save eliminated.
 207              	.LVL12:
 208 0000 7047     		bx	lr
 209              		.cfi_endproc
 210              	.LFE5:
 211              		.size	UART_WriteControlRegister, .-UART_WriteControlRegister
 212 0002 00BF     		.section	.text.UART_SetTxInterruptMode,"ax",%progbits
 213              		.align	2
 214              		.global	UART_SetTxInterruptMode
 215              		.thumb
 216              		.thumb_func
 217              		.type	UART_SetTxInterruptMode, %function
 218              	UART_SetTxInterruptMode:
 219              	.LFB6:
 321:.\Generated_Source\PSoC5/UART.c ****     #if (UART_CONTROL_REG_REMOVED)
 322:.\Generated_Source\PSoC5/UART.c ****         if(0u != control)
 323:.\Generated_Source\PSoC5/UART.c ****         {
 324:.\Generated_Source\PSoC5/UART.c ****             /* Suppress compiler warning */
 325:.\Generated_Source\PSoC5/UART.c ****         }
 326:.\Generated_Source\PSoC5/UART.c ****     #else
 327:.\Generated_Source\PSoC5/UART.c ****        UART_CONTROL_REG = control;
 328:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_CONTROL_REG_REMOVED) */
 329:.\Generated_Source\PSoC5/UART.c **** }
 330:.\Generated_Source\PSoC5/UART.c **** 
 331:.\Generated_Source\PSoC5/UART.c **** 
 332:.\Generated_Source\PSoC5/UART.c **** #if(UART_RX_ENABLED || UART_HD_ENABLED)
 333:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 334:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetRxInterruptMode
 335:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 336:.\Generated_Source\PSoC5/UART.c ****     *
 337:.\Generated_Source\PSoC5/UART.c ****     * Summary:
 338:.\Generated_Source\PSoC5/UART.c ****     *  Configures the RX interrupt sources enabled.
 339:.\Generated_Source\PSoC5/UART.c ****     *
 340:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
 341:.\Generated_Source\PSoC5/UART.c ****     *  IntSrc:  Bit field containing the RX interrupts to enable. Based on the 
 342:.\Generated_Source\PSoC5/UART.c ****     *  bit-field arrangement of the status register. This value must be a 
 343:.\Generated_Source\PSoC5/UART.c ****     *  combination of status register bit-masks shown below:
 344:.\Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_FIFO_NOTEMPTY    Interrupt on byte received.
 345:.\Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_PAR_ERROR        Interrupt on parity error.
 346:.\Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_STOP_ERROR       Interrupt on stop error.
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 11


 347:.\Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_BREAK            Interrupt on break.
 348:.\Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_OVERRUN          Interrupt on overrun error.
 349:.\Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_ADDR_MATCH       Interrupt on address match.
 350:.\Generated_Source\PSoC5/UART.c ****     *      UART_RX_STS_MRKSPC           Interrupt on address detect.
 351:.\Generated_Source\PSoC5/UART.c ****     *
 352:.\Generated_Source\PSoC5/UART.c ****     * Return:
 353:.\Generated_Source\PSoC5/UART.c ****     *  None.
 354:.\Generated_Source\PSoC5/UART.c ****     *
 355:.\Generated_Source\PSoC5/UART.c ****     * Theory:
 356:.\Generated_Source\PSoC5/UART.c ****     *  Enables the output of specific status bits to the interrupt controller
 357:.\Generated_Source\PSoC5/UART.c ****     *
 358:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 359:.\Generated_Source\PSoC5/UART.c ****     void UART_SetRxInterruptMode(uint8 intSrc) 
 360:.\Generated_Source\PSoC5/UART.c ****     {
 361:.\Generated_Source\PSoC5/UART.c ****         UART_RXSTATUS_MASK_REG  = intSrc;
 362:.\Generated_Source\PSoC5/UART.c ****     }
 363:.\Generated_Source\PSoC5/UART.c **** 
 364:.\Generated_Source\PSoC5/UART.c **** 
 365:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 366:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ReadRxData
 367:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 368:.\Generated_Source\PSoC5/UART.c ****     *
 369:.\Generated_Source\PSoC5/UART.c ****     * Summary:
 370:.\Generated_Source\PSoC5/UART.c ****     *  Returns the next byte of received data. This function returns data without
 371:.\Generated_Source\PSoC5/UART.c ****     *  checking the status. You must check the status separately.
 372:.\Generated_Source\PSoC5/UART.c ****     *
 373:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
 374:.\Generated_Source\PSoC5/UART.c ****     *  None.
 375:.\Generated_Source\PSoC5/UART.c ****     *
 376:.\Generated_Source\PSoC5/UART.c ****     * Return:
 377:.\Generated_Source\PSoC5/UART.c ****     *  Received data from RX register
 378:.\Generated_Source\PSoC5/UART.c ****     *
 379:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
 380:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBuffer - RAM buffer pointer for save received data.
 381:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferWrite - cyclic index for write to rxBuffer,
 382:.\Generated_Source\PSoC5/UART.c ****     *     checked to identify new data.
 383:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferRead - cyclic index for read from rxBuffer,
 384:.\Generated_Source\PSoC5/UART.c ****     *     incremented after each byte has been read from buffer.
 385:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferLoopDetect - cleared if loop condition was detected
 386:.\Generated_Source\PSoC5/UART.c ****     *     in RX ISR.
 387:.\Generated_Source\PSoC5/UART.c ****     *
 388:.\Generated_Source\PSoC5/UART.c ****     * Reentrant:
 389:.\Generated_Source\PSoC5/UART.c ****     *  No.
 390:.\Generated_Source\PSoC5/UART.c ****     *
 391:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 392:.\Generated_Source\PSoC5/UART.c ****     uint8 UART_ReadRxData(void) 
 393:.\Generated_Source\PSoC5/UART.c ****     {
 394:.\Generated_Source\PSoC5/UART.c ****         uint8 rxData;
 395:.\Generated_Source\PSoC5/UART.c **** 
 396:.\Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 397:.\Generated_Source\PSoC5/UART.c **** 
 398:.\Generated_Source\PSoC5/UART.c ****         uint8 locRxBufferRead;
 399:.\Generated_Source\PSoC5/UART.c ****         uint8 locRxBufferWrite;
 400:.\Generated_Source\PSoC5/UART.c **** 
 401:.\Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt */
 402:.\Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 403:.\Generated_Source\PSoC5/UART.c **** 
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 12


 404:.\Generated_Source\PSoC5/UART.c ****         locRxBufferRead  = UART_rxBufferRead;
 405:.\Generated_Source\PSoC5/UART.c ****         locRxBufferWrite = UART_rxBufferWrite;
 406:.\Generated_Source\PSoC5/UART.c **** 
 407:.\Generated_Source\PSoC5/UART.c ****         if( (UART_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 408:.\Generated_Source\PSoC5/UART.c ****         {
 409:.\Generated_Source\PSoC5/UART.c ****             rxData = UART_rxBuffer[locRxBufferRead];
 410:.\Generated_Source\PSoC5/UART.c ****             locRxBufferRead++;
 411:.\Generated_Source\PSoC5/UART.c **** 
 412:.\Generated_Source\PSoC5/UART.c ****             if(locRxBufferRead >= UART_RX_BUFFER_SIZE)
 413:.\Generated_Source\PSoC5/UART.c ****             {
 414:.\Generated_Source\PSoC5/UART.c ****                 locRxBufferRead = 0u;
 415:.\Generated_Source\PSoC5/UART.c ****             }
 416:.\Generated_Source\PSoC5/UART.c ****             /* Update the real pointer */
 417:.\Generated_Source\PSoC5/UART.c ****             UART_rxBufferRead = locRxBufferRead;
 418:.\Generated_Source\PSoC5/UART.c **** 
 419:.\Generated_Source\PSoC5/UART.c ****             if(UART_rxBufferLoopDetect != 0u)
 420:.\Generated_Source\PSoC5/UART.c ****             {
 421:.\Generated_Source\PSoC5/UART.c ****                 UART_rxBufferLoopDetect = 0u;
 422:.\Generated_Source\PSoC5/UART.c ****                 #if ((UART_RX_INTERRUPT_ENABLED) && (UART_FLOW_CONTROL != 0u))
 423:.\Generated_Source\PSoC5/UART.c ****                     /* When Hardware Flow Control selected - return RX mask */
 424:.\Generated_Source\PSoC5/UART.c ****                     #if( UART_HD_ENABLED )
 425:.\Generated_Source\PSoC5/UART.c ****                         if((UART_CONTROL_REG & UART_CTRL_HD_SEND) == 0u)
 426:.\Generated_Source\PSoC5/UART.c ****                         {   /* In Half duplex mode return RX mask only in RX
 427:.\Generated_Source\PSoC5/UART.c ****                             *  configuration set, otherwise
 428:.\Generated_Source\PSoC5/UART.c ****                             *  mask will be returned in LoadRxConfig() API.
 429:.\Generated_Source\PSoC5/UART.c ****                             */
 430:.\Generated_Source\PSoC5/UART.c ****                             UART_RXSTATUS_MASK_REG  |= UART_RX_STS_FIFO_NOTEMPTY;
 431:.\Generated_Source\PSoC5/UART.c ****                         }
 432:.\Generated_Source\PSoC5/UART.c ****                     #else
 433:.\Generated_Source\PSoC5/UART.c ****                         UART_RXSTATUS_MASK_REG  |= UART_RX_STS_FIFO_NOTEMPTY;
 434:.\Generated_Source\PSoC5/UART.c ****                     #endif /* end UART_HD_ENABLED */
 435:.\Generated_Source\PSoC5/UART.c ****                 #endif /* ((UART_RX_INTERRUPT_ENABLED) && (UART_FLOW_CONTROL != 0u)) */
 436:.\Generated_Source\PSoC5/UART.c ****             }
 437:.\Generated_Source\PSoC5/UART.c ****         }
 438:.\Generated_Source\PSoC5/UART.c ****         else
 439:.\Generated_Source\PSoC5/UART.c ****         {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 440:.\Generated_Source\PSoC5/UART.c ****             rxData = UART_RXDATA_REG;
 441:.\Generated_Source\PSoC5/UART.c ****         }
 442:.\Generated_Source\PSoC5/UART.c **** 
 443:.\Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 444:.\Generated_Source\PSoC5/UART.c **** 
 445:.\Generated_Source\PSoC5/UART.c ****     #else
 446:.\Generated_Source\PSoC5/UART.c **** 
 447:.\Generated_Source\PSoC5/UART.c ****         /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 448:.\Generated_Source\PSoC5/UART.c ****         rxData = UART_RXDATA_REG;
 449:.\Generated_Source\PSoC5/UART.c **** 
 450:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 451:.\Generated_Source\PSoC5/UART.c **** 
 452:.\Generated_Source\PSoC5/UART.c ****         return(rxData);
 453:.\Generated_Source\PSoC5/UART.c ****     }
 454:.\Generated_Source\PSoC5/UART.c **** 
 455:.\Generated_Source\PSoC5/UART.c **** 
 456:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 457:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ReadRxStatus
 458:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 459:.\Generated_Source\PSoC5/UART.c ****     *
 460:.\Generated_Source\PSoC5/UART.c ****     * Summary:
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 13


 461:.\Generated_Source\PSoC5/UART.c ****     *  Returns the current state of the receiver status register and the software
 462:.\Generated_Source\PSoC5/UART.c ****     *  buffer overflow status.
 463:.\Generated_Source\PSoC5/UART.c ****     *
 464:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
 465:.\Generated_Source\PSoC5/UART.c ****     *  None.
 466:.\Generated_Source\PSoC5/UART.c ****     *
 467:.\Generated_Source\PSoC5/UART.c ****     * Return:
 468:.\Generated_Source\PSoC5/UART.c ****     *  Current state of the status register.
 469:.\Generated_Source\PSoC5/UART.c ****     *
 470:.\Generated_Source\PSoC5/UART.c ****     * Side Effect:
 471:.\Generated_Source\PSoC5/UART.c ****     *  All status register bits are clear-on-read except
 472:.\Generated_Source\PSoC5/UART.c ****     *  UART_RX_STS_FIFO_NOTEMPTY.
 473:.\Generated_Source\PSoC5/UART.c ****     *  UART_RX_STS_FIFO_NOTEMPTY clears immediately after RX data
 474:.\Generated_Source\PSoC5/UART.c ****     *  register read.
 475:.\Generated_Source\PSoC5/UART.c ****     *
 476:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
 477:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferOverflow - used to indicate overload condition.
 478:.\Generated_Source\PSoC5/UART.c ****     *   It set to one in RX interrupt when there isn't free space in
 479:.\Generated_Source\PSoC5/UART.c ****     *   UART_rxBufferRead to write new data. This condition returned
 480:.\Generated_Source\PSoC5/UART.c ****     *   and cleared to zero by this API as an
 481:.\Generated_Source\PSoC5/UART.c ****     *   UART_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 482:.\Generated_Source\PSoC5/UART.c ****     *   bits.
 483:.\Generated_Source\PSoC5/UART.c ****     *
 484:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 485:.\Generated_Source\PSoC5/UART.c ****     uint8 UART_ReadRxStatus(void) 
 486:.\Generated_Source\PSoC5/UART.c ****     {
 487:.\Generated_Source\PSoC5/UART.c ****         uint8 status;
 488:.\Generated_Source\PSoC5/UART.c **** 
 489:.\Generated_Source\PSoC5/UART.c ****         status = UART_RXSTATUS_REG & UART_RX_HW_MASK;
 490:.\Generated_Source\PSoC5/UART.c **** 
 491:.\Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 492:.\Generated_Source\PSoC5/UART.c ****         if(UART_rxBufferOverflow != 0u)
 493:.\Generated_Source\PSoC5/UART.c ****         {
 494:.\Generated_Source\PSoC5/UART.c ****             status |= UART_RX_STS_SOFT_BUFF_OVER;
 495:.\Generated_Source\PSoC5/UART.c ****             UART_rxBufferOverflow = 0u;
 496:.\Generated_Source\PSoC5/UART.c ****         }
 497:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 498:.\Generated_Source\PSoC5/UART.c **** 
 499:.\Generated_Source\PSoC5/UART.c ****         return(status);
 500:.\Generated_Source\PSoC5/UART.c ****     }
 501:.\Generated_Source\PSoC5/UART.c **** 
 502:.\Generated_Source\PSoC5/UART.c **** 
 503:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 504:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_GetChar
 505:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 506:.\Generated_Source\PSoC5/UART.c ****     *
 507:.\Generated_Source\PSoC5/UART.c ****     * Summary:
 508:.\Generated_Source\PSoC5/UART.c ****     *  Returns the last received byte of data. UART_GetChar() is
 509:.\Generated_Source\PSoC5/UART.c ****     *  designed for ASCII characters and returns a uint8 where 1 to 255 are values
 510:.\Generated_Source\PSoC5/UART.c ****     *  for valid characters and 0 indicates an error occurred or no data is present.
 511:.\Generated_Source\PSoC5/UART.c ****     *
 512:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
 513:.\Generated_Source\PSoC5/UART.c ****     *  None.
 514:.\Generated_Source\PSoC5/UART.c ****     *
 515:.\Generated_Source\PSoC5/UART.c ****     * Return:
 516:.\Generated_Source\PSoC5/UART.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 517:.\Generated_Source\PSoC5/UART.c ****     *  A returned zero signifies an error condition or no data available.
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 14


 518:.\Generated_Source\PSoC5/UART.c ****     *
 519:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
 520:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBuffer - RAM buffer pointer for save received data.
 521:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferWrite - cyclic index for write to rxBuffer,
 522:.\Generated_Source\PSoC5/UART.c ****     *     checked to identify new data.
 523:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferRead - cyclic index for read from rxBuffer,
 524:.\Generated_Source\PSoC5/UART.c ****     *     incremented after each byte has been read from buffer.
 525:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferLoopDetect - cleared if loop condition was detected
 526:.\Generated_Source\PSoC5/UART.c ****     *     in RX ISR.
 527:.\Generated_Source\PSoC5/UART.c ****     *
 528:.\Generated_Source\PSoC5/UART.c ****     * Reentrant:
 529:.\Generated_Source\PSoC5/UART.c ****     *  No.
 530:.\Generated_Source\PSoC5/UART.c ****     *
 531:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 532:.\Generated_Source\PSoC5/UART.c ****     uint8 UART_GetChar(void) 
 533:.\Generated_Source\PSoC5/UART.c ****     {
 534:.\Generated_Source\PSoC5/UART.c ****         uint8 rxData = 0u;
 535:.\Generated_Source\PSoC5/UART.c ****         uint8 rxStatus;
 536:.\Generated_Source\PSoC5/UART.c **** 
 537:.\Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 538:.\Generated_Source\PSoC5/UART.c ****         uint8 locRxBufferRead;
 539:.\Generated_Source\PSoC5/UART.c ****         uint8 locRxBufferWrite;
 540:.\Generated_Source\PSoC5/UART.c **** 
 541:.\Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt */
 542:.\Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 543:.\Generated_Source\PSoC5/UART.c **** 
 544:.\Generated_Source\PSoC5/UART.c ****         locRxBufferRead  = UART_rxBufferRead;
 545:.\Generated_Source\PSoC5/UART.c ****         locRxBufferWrite = UART_rxBufferWrite;
 546:.\Generated_Source\PSoC5/UART.c **** 
 547:.\Generated_Source\PSoC5/UART.c ****         if( (UART_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 548:.\Generated_Source\PSoC5/UART.c ****         {
 549:.\Generated_Source\PSoC5/UART.c ****             rxData = UART_rxBuffer[locRxBufferRead];
 550:.\Generated_Source\PSoC5/UART.c ****             locRxBufferRead++;
 551:.\Generated_Source\PSoC5/UART.c ****             if(locRxBufferRead >= UART_RX_BUFFER_SIZE)
 552:.\Generated_Source\PSoC5/UART.c ****             {
 553:.\Generated_Source\PSoC5/UART.c ****                 locRxBufferRead = 0u;
 554:.\Generated_Source\PSoC5/UART.c ****             }
 555:.\Generated_Source\PSoC5/UART.c ****             /* Update the real pointer */
 556:.\Generated_Source\PSoC5/UART.c ****             UART_rxBufferRead = locRxBufferRead;
 557:.\Generated_Source\PSoC5/UART.c **** 
 558:.\Generated_Source\PSoC5/UART.c ****             if(UART_rxBufferLoopDetect != 0u)
 559:.\Generated_Source\PSoC5/UART.c ****             {
 560:.\Generated_Source\PSoC5/UART.c ****                 UART_rxBufferLoopDetect = 0u;
 561:.\Generated_Source\PSoC5/UART.c ****                 #if( (UART_RX_INTERRUPT_ENABLED) && (UART_FLOW_CONTROL != 0u) )
 562:.\Generated_Source\PSoC5/UART.c ****                     /* When Hardware Flow Control selected - return RX mask */
 563:.\Generated_Source\PSoC5/UART.c ****                     #if( UART_HD_ENABLED )
 564:.\Generated_Source\PSoC5/UART.c ****                         if((UART_CONTROL_REG & UART_CTRL_HD_SEND) == 0u)
 565:.\Generated_Source\PSoC5/UART.c ****                         {   /* In Half duplex mode return RX mask only if
 566:.\Generated_Source\PSoC5/UART.c ****                             *  RX configuration set, otherwise
 567:.\Generated_Source\PSoC5/UART.c ****                             *  mask will be returned in LoadRxConfig() API.
 568:.\Generated_Source\PSoC5/UART.c ****                             */
 569:.\Generated_Source\PSoC5/UART.c ****                             UART_RXSTATUS_MASK_REG |= UART_RX_STS_FIFO_NOTEMPTY;
 570:.\Generated_Source\PSoC5/UART.c ****                         }
 571:.\Generated_Source\PSoC5/UART.c ****                     #else
 572:.\Generated_Source\PSoC5/UART.c ****                         UART_RXSTATUS_MASK_REG |= UART_RX_STS_FIFO_NOTEMPTY;
 573:.\Generated_Source\PSoC5/UART.c ****                     #endif /* end UART_HD_ENABLED */
 574:.\Generated_Source\PSoC5/UART.c ****                 #endif /* UART_RX_INTERRUPT_ENABLED and Hardware flow control*/
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 15


 575:.\Generated_Source\PSoC5/UART.c ****             }
 576:.\Generated_Source\PSoC5/UART.c **** 
 577:.\Generated_Source\PSoC5/UART.c ****         }
 578:.\Generated_Source\PSoC5/UART.c ****         else
 579:.\Generated_Source\PSoC5/UART.c ****         {   rxStatus = UART_RXSTATUS_REG;
 580:.\Generated_Source\PSoC5/UART.c ****             if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 581:.\Generated_Source\PSoC5/UART.c ****             {   /* Read received data from FIFO */
 582:.\Generated_Source\PSoC5/UART.c ****                 rxData = UART_RXDATA_REG;
 583:.\Generated_Source\PSoC5/UART.c ****                 /*Check status on error*/
 584:.\Generated_Source\PSoC5/UART.c ****                 if((rxStatus & (UART_RX_STS_BREAK | UART_RX_STS_PAR_ERROR |
 585:.\Generated_Source\PSoC5/UART.c ****                                 UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 586:.\Generated_Source\PSoC5/UART.c ****                 {
 587:.\Generated_Source\PSoC5/UART.c ****                     rxData = 0u;
 588:.\Generated_Source\PSoC5/UART.c ****                 }
 589:.\Generated_Source\PSoC5/UART.c ****             }
 590:.\Generated_Source\PSoC5/UART.c ****         }
 591:.\Generated_Source\PSoC5/UART.c **** 
 592:.\Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 593:.\Generated_Source\PSoC5/UART.c **** 
 594:.\Generated_Source\PSoC5/UART.c ****     #else
 595:.\Generated_Source\PSoC5/UART.c **** 
 596:.\Generated_Source\PSoC5/UART.c ****         rxStatus =UART_RXSTATUS_REG;
 597:.\Generated_Source\PSoC5/UART.c ****         if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 598:.\Generated_Source\PSoC5/UART.c ****         {
 599:.\Generated_Source\PSoC5/UART.c ****             /* Read received data from FIFO */
 600:.\Generated_Source\PSoC5/UART.c ****             rxData = UART_RXDATA_REG;
 601:.\Generated_Source\PSoC5/UART.c **** 
 602:.\Generated_Source\PSoC5/UART.c ****             /*Check status on error*/
 603:.\Generated_Source\PSoC5/UART.c ****             if((rxStatus & (UART_RX_STS_BREAK | UART_RX_STS_PAR_ERROR |
 604:.\Generated_Source\PSoC5/UART.c ****                             UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 605:.\Generated_Source\PSoC5/UART.c ****             {
 606:.\Generated_Source\PSoC5/UART.c ****                 rxData = 0u;
 607:.\Generated_Source\PSoC5/UART.c ****             }
 608:.\Generated_Source\PSoC5/UART.c ****         }
 609:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 610:.\Generated_Source\PSoC5/UART.c **** 
 611:.\Generated_Source\PSoC5/UART.c ****         return(rxData);
 612:.\Generated_Source\PSoC5/UART.c ****     }
 613:.\Generated_Source\PSoC5/UART.c **** 
 614:.\Generated_Source\PSoC5/UART.c **** 
 615:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 616:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_GetByte
 617:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 618:.\Generated_Source\PSoC5/UART.c ****     *
 619:.\Generated_Source\PSoC5/UART.c ****     * Summary:
 620:.\Generated_Source\PSoC5/UART.c ****     *  Reads UART RX buffer immediately, returns received character and error
 621:.\Generated_Source\PSoC5/UART.c ****     *  condition.
 622:.\Generated_Source\PSoC5/UART.c ****     *
 623:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
 624:.\Generated_Source\PSoC5/UART.c ****     *  None.
 625:.\Generated_Source\PSoC5/UART.c ****     *
 626:.\Generated_Source\PSoC5/UART.c ****     * Return:
 627:.\Generated_Source\PSoC5/UART.c ****     *  MSB contains status and LSB contains UART RX data. If the MSB is nonzero,
 628:.\Generated_Source\PSoC5/UART.c ****     *  an error has occurred.
 629:.\Generated_Source\PSoC5/UART.c ****     *
 630:.\Generated_Source\PSoC5/UART.c ****     * Reentrant:
 631:.\Generated_Source\PSoC5/UART.c ****     *  No.
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 16


 632:.\Generated_Source\PSoC5/UART.c ****     *
 633:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 634:.\Generated_Source\PSoC5/UART.c ****     uint16 UART_GetByte(void) 
 635:.\Generated_Source\PSoC5/UART.c ****     {
 636:.\Generated_Source\PSoC5/UART.c ****         
 637:.\Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 638:.\Generated_Source\PSoC5/UART.c ****         uint16 locErrorStatus;
 639:.\Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt */
 640:.\Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 641:.\Generated_Source\PSoC5/UART.c ****         locErrorStatus = (uint16)UART_errorStatus;
 642:.\Generated_Source\PSoC5/UART.c ****         UART_errorStatus = 0u;
 643:.\Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 644:.\Generated_Source\PSoC5/UART.c ****         return ( (uint16)(locErrorStatus << 8u) | UART_ReadRxData() );
 645:.\Generated_Source\PSoC5/UART.c ****     #else
 646:.\Generated_Source\PSoC5/UART.c ****         return ( ((uint16)UART_ReadRxStatus() << 8u) | UART_ReadRxData() );
 647:.\Generated_Source\PSoC5/UART.c ****     #endif /* UART_RX_INTERRUPT_ENABLED */
 648:.\Generated_Source\PSoC5/UART.c ****         
 649:.\Generated_Source\PSoC5/UART.c ****     }
 650:.\Generated_Source\PSoC5/UART.c **** 
 651:.\Generated_Source\PSoC5/UART.c **** 
 652:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 653:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_GetRxBufferSize
 654:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 655:.\Generated_Source\PSoC5/UART.c ****     *
 656:.\Generated_Source\PSoC5/UART.c ****     * Summary:
 657:.\Generated_Source\PSoC5/UART.c ****     *  Returns the number of received bytes available in the RX buffer.
 658:.\Generated_Source\PSoC5/UART.c ****     *  * RX software buffer is disabled (RX Buffer Size parameter is equal to 4): 
 659:.\Generated_Source\PSoC5/UART.c ****     *    returns 0 for empty RX FIFO or 1 for not empty RX FIFO.
 660:.\Generated_Source\PSoC5/UART.c ****     *  * RX software buffer is enabled: returns the number of bytes available in 
 661:.\Generated_Source\PSoC5/UART.c ****     *    the RX software buffer. Bytes available in the RX FIFO do not take to 
 662:.\Generated_Source\PSoC5/UART.c ****     *    account.
 663:.\Generated_Source\PSoC5/UART.c ****     *
 664:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
 665:.\Generated_Source\PSoC5/UART.c ****     *  None.
 666:.\Generated_Source\PSoC5/UART.c ****     *
 667:.\Generated_Source\PSoC5/UART.c ****     * Return:
 668:.\Generated_Source\PSoC5/UART.c ****     *  uint8: Number of bytes in the RX buffer. 
 669:.\Generated_Source\PSoC5/UART.c ****     *    Return value type depends on RX Buffer Size parameter.
 670:.\Generated_Source\PSoC5/UART.c ****     *
 671:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
 672:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferWrite - used to calculate left bytes.
 673:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferRead - used to calculate left bytes.
 674:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferLoopDetect - checked to decide left bytes amount.
 675:.\Generated_Source\PSoC5/UART.c ****     *
 676:.\Generated_Source\PSoC5/UART.c ****     * Reentrant:
 677:.\Generated_Source\PSoC5/UART.c ****     *  No.
 678:.\Generated_Source\PSoC5/UART.c ****     *
 679:.\Generated_Source\PSoC5/UART.c ****     * Theory:
 680:.\Generated_Source\PSoC5/UART.c ****     *  Allows the user to find out how full the RX Buffer is.
 681:.\Generated_Source\PSoC5/UART.c ****     *
 682:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 683:.\Generated_Source\PSoC5/UART.c ****     uint8 UART_GetRxBufferSize(void)
 684:.\Generated_Source\PSoC5/UART.c ****                                                             
 685:.\Generated_Source\PSoC5/UART.c ****     {
 686:.\Generated_Source\PSoC5/UART.c ****         uint8 size;
 687:.\Generated_Source\PSoC5/UART.c **** 
 688:.\Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 17


 689:.\Generated_Source\PSoC5/UART.c **** 
 690:.\Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt */
 691:.\Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 692:.\Generated_Source\PSoC5/UART.c **** 
 693:.\Generated_Source\PSoC5/UART.c ****         if(UART_rxBufferRead == UART_rxBufferWrite)
 694:.\Generated_Source\PSoC5/UART.c ****         {
 695:.\Generated_Source\PSoC5/UART.c ****             if(UART_rxBufferLoopDetect != 0u)
 696:.\Generated_Source\PSoC5/UART.c ****             {
 697:.\Generated_Source\PSoC5/UART.c ****                 size = UART_RX_BUFFER_SIZE;
 698:.\Generated_Source\PSoC5/UART.c ****             }
 699:.\Generated_Source\PSoC5/UART.c ****             else
 700:.\Generated_Source\PSoC5/UART.c ****             {
 701:.\Generated_Source\PSoC5/UART.c ****                 size = 0u;
 702:.\Generated_Source\PSoC5/UART.c ****             }
 703:.\Generated_Source\PSoC5/UART.c ****         }
 704:.\Generated_Source\PSoC5/UART.c ****         else if(UART_rxBufferRead < UART_rxBufferWrite)
 705:.\Generated_Source\PSoC5/UART.c ****         {
 706:.\Generated_Source\PSoC5/UART.c ****             size = (UART_rxBufferWrite - UART_rxBufferRead);
 707:.\Generated_Source\PSoC5/UART.c ****         }
 708:.\Generated_Source\PSoC5/UART.c ****         else
 709:.\Generated_Source\PSoC5/UART.c ****         {
 710:.\Generated_Source\PSoC5/UART.c ****             size = (UART_RX_BUFFER_SIZE - UART_rxBufferRead) + UART_rxBufferWrite;
 711:.\Generated_Source\PSoC5/UART.c ****         }
 712:.\Generated_Source\PSoC5/UART.c **** 
 713:.\Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 714:.\Generated_Source\PSoC5/UART.c **** 
 715:.\Generated_Source\PSoC5/UART.c ****     #else
 716:.\Generated_Source\PSoC5/UART.c **** 
 717:.\Generated_Source\PSoC5/UART.c ****         /* We can only know if there is data in the fifo. */
 718:.\Generated_Source\PSoC5/UART.c ****         size = ((UART_RXSTATUS_REG & UART_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 719:.\Generated_Source\PSoC5/UART.c **** 
 720:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 721:.\Generated_Source\PSoC5/UART.c **** 
 722:.\Generated_Source\PSoC5/UART.c ****         return(size);
 723:.\Generated_Source\PSoC5/UART.c ****     }
 724:.\Generated_Source\PSoC5/UART.c **** 
 725:.\Generated_Source\PSoC5/UART.c **** 
 726:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 727:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ClearRxBuffer
 728:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 729:.\Generated_Source\PSoC5/UART.c ****     *
 730:.\Generated_Source\PSoC5/UART.c ****     * Summary:
 731:.\Generated_Source\PSoC5/UART.c ****     *  Clears the receiver memory buffer and hardware RX FIFO of all received data.
 732:.\Generated_Source\PSoC5/UART.c ****     *
 733:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
 734:.\Generated_Source\PSoC5/UART.c ****     *  None.
 735:.\Generated_Source\PSoC5/UART.c ****     *
 736:.\Generated_Source\PSoC5/UART.c ****     * Return:
 737:.\Generated_Source\PSoC5/UART.c ****     *  None.
 738:.\Generated_Source\PSoC5/UART.c ****     *
 739:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
 740:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferWrite - cleared to zero.
 741:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferRead - cleared to zero.
 742:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferLoopDetect - cleared to zero.
 743:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxBufferOverflow - cleared to zero.
 744:.\Generated_Source\PSoC5/UART.c ****     *
 745:.\Generated_Source\PSoC5/UART.c ****     * Reentrant:
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 18


 746:.\Generated_Source\PSoC5/UART.c ****     *  No.
 747:.\Generated_Source\PSoC5/UART.c ****     *
 748:.\Generated_Source\PSoC5/UART.c ****     * Theory:
 749:.\Generated_Source\PSoC5/UART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 750:.\Generated_Source\PSoC5/UART.c ****     *  read and writing will resume at address 0 overwriting any data that may
 751:.\Generated_Source\PSoC5/UART.c ****     *  have remained in the RAM.
 752:.\Generated_Source\PSoC5/UART.c ****     *
 753:.\Generated_Source\PSoC5/UART.c ****     * Side Effects:
 754:.\Generated_Source\PSoC5/UART.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 755:.\Generated_Source\PSoC5/UART.c ****     *
 756:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 757:.\Generated_Source\PSoC5/UART.c ****     void UART_ClearRxBuffer(void) 
 758:.\Generated_Source\PSoC5/UART.c ****     {
 759:.\Generated_Source\PSoC5/UART.c ****         uint8 enableInterrupts;
 760:.\Generated_Source\PSoC5/UART.c **** 
 761:.\Generated_Source\PSoC5/UART.c ****         /* Clear the HW FIFO */
 762:.\Generated_Source\PSoC5/UART.c ****         enableInterrupts = CyEnterCriticalSection();
 763:.\Generated_Source\PSoC5/UART.c ****         UART_RXDATA_AUX_CTL_REG |= (uint8)  UART_RX_FIFO_CLR;
 764:.\Generated_Source\PSoC5/UART.c ****         UART_RXDATA_AUX_CTL_REG &= (uint8) ~UART_RX_FIFO_CLR;
 765:.\Generated_Source\PSoC5/UART.c ****         CyExitCriticalSection(enableInterrupts);
 766:.\Generated_Source\PSoC5/UART.c **** 
 767:.\Generated_Source\PSoC5/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 768:.\Generated_Source\PSoC5/UART.c **** 
 769:.\Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt. */
 770:.\Generated_Source\PSoC5/UART.c ****         UART_DisableRxInt();
 771:.\Generated_Source\PSoC5/UART.c **** 
 772:.\Generated_Source\PSoC5/UART.c ****         UART_rxBufferRead = 0u;
 773:.\Generated_Source\PSoC5/UART.c ****         UART_rxBufferWrite = 0u;
 774:.\Generated_Source\PSoC5/UART.c ****         UART_rxBufferLoopDetect = 0u;
 775:.\Generated_Source\PSoC5/UART.c ****         UART_rxBufferOverflow = 0u;
 776:.\Generated_Source\PSoC5/UART.c **** 
 777:.\Generated_Source\PSoC5/UART.c ****         UART_EnableRxInt();
 778:.\Generated_Source\PSoC5/UART.c **** 
 779:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 780:.\Generated_Source\PSoC5/UART.c **** 
 781:.\Generated_Source\PSoC5/UART.c ****     }
 782:.\Generated_Source\PSoC5/UART.c **** 
 783:.\Generated_Source\PSoC5/UART.c **** 
 784:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 785:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetRxAddressMode
 786:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 787:.\Generated_Source\PSoC5/UART.c ****     *
 788:.\Generated_Source\PSoC5/UART.c ****     * Summary:
 789:.\Generated_Source\PSoC5/UART.c ****     *  Sets the software controlled Addressing mode used by the RX portion of the
 790:.\Generated_Source\PSoC5/UART.c ****     *  UART.
 791:.\Generated_Source\PSoC5/UART.c ****     *
 792:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
 793:.\Generated_Source\PSoC5/UART.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 794:.\Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 795:.\Generated_Source\PSoC5/UART.c ****     *                                               detection
 796:.\Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 797:.\Generated_Source\PSoC5/UART.c ****     *                                               address detection
 798:.\Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 799:.\Generated_Source\PSoC5/UART.c ****     *                                               detection
 800:.\Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 801:.\Generated_Source\PSoC5/UART.c ****     *                                               address detection
 802:.\Generated_Source\PSoC5/UART.c ****     *  UART__B_UART__AM_NONE - No address detection
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 19


 803:.\Generated_Source\PSoC5/UART.c ****     *
 804:.\Generated_Source\PSoC5/UART.c ****     * Return:
 805:.\Generated_Source\PSoC5/UART.c ****     *  None.
 806:.\Generated_Source\PSoC5/UART.c ****     *
 807:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
 808:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxAddressMode - the parameter stored in this variable for
 809:.\Generated_Source\PSoC5/UART.c ****     *   the farther usage in RX ISR.
 810:.\Generated_Source\PSoC5/UART.c ****     *  UART_rxAddressDetected - set to initial state (0).
 811:.\Generated_Source\PSoC5/UART.c ****     *
 812:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 813:.\Generated_Source\PSoC5/UART.c ****     void UART_SetRxAddressMode(uint8 addressMode)
 814:.\Generated_Source\PSoC5/UART.c ****                                                         
 815:.\Generated_Source\PSoC5/UART.c ****     {
 816:.\Generated_Source\PSoC5/UART.c ****         #if(UART_RXHW_ADDRESS_ENABLED)
 817:.\Generated_Source\PSoC5/UART.c ****             #if(UART_CONTROL_REG_REMOVED)
 818:.\Generated_Source\PSoC5/UART.c ****                 if(0u != addressMode)
 819:.\Generated_Source\PSoC5/UART.c ****                 {
 820:.\Generated_Source\PSoC5/UART.c ****                     /* Suppress compiler warning */
 821:.\Generated_Source\PSoC5/UART.c ****                 }
 822:.\Generated_Source\PSoC5/UART.c ****             #else /* UART_CONTROL_REG_REMOVED */
 823:.\Generated_Source\PSoC5/UART.c ****                 uint8 tmpCtrl;
 824:.\Generated_Source\PSoC5/UART.c ****                 tmpCtrl = UART_CONTROL_REG & (uint8)~UART_CTRL_RXADDR_MODE_MASK;
 825:.\Generated_Source\PSoC5/UART.c ****                 tmpCtrl |= (uint8)(addressMode << UART_CTRL_RXADDR_MODE0_SHIFT);
 826:.\Generated_Source\PSoC5/UART.c ****                 UART_CONTROL_REG = tmpCtrl;
 827:.\Generated_Source\PSoC5/UART.c **** 
 828:.\Generated_Source\PSoC5/UART.c ****                 #if(UART_RX_INTERRUPT_ENABLED && \
 829:.\Generated_Source\PSoC5/UART.c ****                    (UART_RXBUFFERSIZE > UART_FIFO_LENGTH) )
 830:.\Generated_Source\PSoC5/UART.c ****                     UART_rxAddressMode = addressMode;
 831:.\Generated_Source\PSoC5/UART.c ****                     UART_rxAddressDetected = 0u;
 832:.\Generated_Source\PSoC5/UART.c ****                 #endif /* End UART_RXBUFFERSIZE > UART_FIFO_LENGTH*/
 833:.\Generated_Source\PSoC5/UART.c ****             #endif /* End UART_CONTROL_REG_REMOVED */
 834:.\Generated_Source\PSoC5/UART.c ****         #else /* UART_RXHW_ADDRESS_ENABLED */
 835:.\Generated_Source\PSoC5/UART.c ****             if(0u != addressMode)
 836:.\Generated_Source\PSoC5/UART.c ****             {
 837:.\Generated_Source\PSoC5/UART.c ****                 /* Suppress compiler warning */
 838:.\Generated_Source\PSoC5/UART.c ****             }
 839:.\Generated_Source\PSoC5/UART.c ****         #endif /* End UART_RXHW_ADDRESS_ENABLED */
 840:.\Generated_Source\PSoC5/UART.c ****     }
 841:.\Generated_Source\PSoC5/UART.c **** 
 842:.\Generated_Source\PSoC5/UART.c **** 
 843:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 844:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetRxAddress1
 845:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 846:.\Generated_Source\PSoC5/UART.c ****     *
 847:.\Generated_Source\PSoC5/UART.c ****     * Summary:
 848:.\Generated_Source\PSoC5/UART.c ****     *  Sets the first of two hardware-detectable receiver addresses.
 849:.\Generated_Source\PSoC5/UART.c ****     *
 850:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
 851:.\Generated_Source\PSoC5/UART.c ****     *  address: Address #1 for hardware address detection.
 852:.\Generated_Source\PSoC5/UART.c ****     *
 853:.\Generated_Source\PSoC5/UART.c ****     * Return:
 854:.\Generated_Source\PSoC5/UART.c ****     *  None.
 855:.\Generated_Source\PSoC5/UART.c ****     *
 856:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 857:.\Generated_Source\PSoC5/UART.c ****     void UART_SetRxAddress1(uint8 address) 
 858:.\Generated_Source\PSoC5/UART.c ****     {
 859:.\Generated_Source\PSoC5/UART.c ****         UART_RXADDRESS1_REG = address;
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 20


 860:.\Generated_Source\PSoC5/UART.c ****     }
 861:.\Generated_Source\PSoC5/UART.c **** 
 862:.\Generated_Source\PSoC5/UART.c **** 
 863:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 864:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetRxAddress2
 865:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 866:.\Generated_Source\PSoC5/UART.c ****     *
 867:.\Generated_Source\PSoC5/UART.c ****     * Summary:
 868:.\Generated_Source\PSoC5/UART.c ****     *  Sets the second of two hardware-detectable receiver addresses.
 869:.\Generated_Source\PSoC5/UART.c ****     *
 870:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
 871:.\Generated_Source\PSoC5/UART.c ****     *  address: Address #2 for hardware address detection.
 872:.\Generated_Source\PSoC5/UART.c ****     *
 873:.\Generated_Source\PSoC5/UART.c ****     * Return:
 874:.\Generated_Source\PSoC5/UART.c ****     *  None.
 875:.\Generated_Source\PSoC5/UART.c ****     *
 876:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 877:.\Generated_Source\PSoC5/UART.c ****     void UART_SetRxAddress2(uint8 address) 
 878:.\Generated_Source\PSoC5/UART.c ****     {
 879:.\Generated_Source\PSoC5/UART.c ****         UART_RXADDRESS2_REG = address;
 880:.\Generated_Source\PSoC5/UART.c ****     }
 881:.\Generated_Source\PSoC5/UART.c **** 
 882:.\Generated_Source\PSoC5/UART.c **** #endif  /* UART_RX_ENABLED || UART_HD_ENABLED*/
 883:.\Generated_Source\PSoC5/UART.c **** 
 884:.\Generated_Source\PSoC5/UART.c **** 
 885:.\Generated_Source\PSoC5/UART.c **** #if( (UART_TX_ENABLED) || (UART_HD_ENABLED) )
 886:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 887:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetTxInterruptMode
 888:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 889:.\Generated_Source\PSoC5/UART.c ****     *
 890:.\Generated_Source\PSoC5/UART.c ****     * Summary:
 891:.\Generated_Source\PSoC5/UART.c ****     *  Configures the TX interrupt sources to be enabled, but does not enable the
 892:.\Generated_Source\PSoC5/UART.c ****     *  interrupt.
 893:.\Generated_Source\PSoC5/UART.c ****     *
 894:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
 895:.\Generated_Source\PSoC5/UART.c ****     *  intSrc: Bit field containing the TX interrupt sources to enable
 896:.\Generated_Source\PSoC5/UART.c ****     *   UART_TX_STS_COMPLETE        Interrupt on TX byte complete
 897:.\Generated_Source\PSoC5/UART.c ****     *   UART_TX_STS_FIFO_EMPTY      Interrupt when TX FIFO is empty
 898:.\Generated_Source\PSoC5/UART.c ****     *   UART_TX_STS_FIFO_FULL       Interrupt when TX FIFO is full
 899:.\Generated_Source\PSoC5/UART.c ****     *   UART_TX_STS_FIFO_NOT_FULL   Interrupt when TX FIFO is not full
 900:.\Generated_Source\PSoC5/UART.c ****     *
 901:.\Generated_Source\PSoC5/UART.c ****     * Return:
 902:.\Generated_Source\PSoC5/UART.c ****     *  None.
 903:.\Generated_Source\PSoC5/UART.c ****     *
 904:.\Generated_Source\PSoC5/UART.c ****     * Theory:
 905:.\Generated_Source\PSoC5/UART.c ****     *  Enables the output of specific status bits to the interrupt controller
 906:.\Generated_Source\PSoC5/UART.c ****     *
 907:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 908:.\Generated_Source\PSoC5/UART.c ****     void UART_SetTxInterruptMode(uint8 intSrc) 
 909:.\Generated_Source\PSoC5/UART.c ****     {
 220              		.loc 1 909 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224              		@ link register save eliminated.
 225              	.LVL13:
 910:.\Generated_Source\PSoC5/UART.c ****         UART_TXSTATUS_MASK_REG = intSrc;
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 21


 226              		.loc 1 910 0
 227 0000 014B     		ldr	r3, .L20
 228 0002 1870     		strb	r0, [r3]
 229 0004 7047     		bx	lr
 230              	.L21:
 231 0006 00BF     		.align	2
 232              	.L20:
 233 0008 84640040 		.word	1073767556
 234              		.cfi_endproc
 235              	.LFE6:
 236              		.size	UART_SetTxInterruptMode, .-UART_SetTxInterruptMode
 237              		.section	.text.UART_WriteTxData,"ax",%progbits
 238              		.align	2
 239              		.global	UART_WriteTxData
 240              		.thumb
 241              		.thumb_func
 242              		.type	UART_WriteTxData, %function
 243              	UART_WriteTxData:
 244              	.LFB7:
 911:.\Generated_Source\PSoC5/UART.c ****     }
 912:.\Generated_Source\PSoC5/UART.c **** 
 913:.\Generated_Source\PSoC5/UART.c **** 
 914:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 915:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_WriteTxData
 916:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 917:.\Generated_Source\PSoC5/UART.c ****     *
 918:.\Generated_Source\PSoC5/UART.c ****     * Summary:
 919:.\Generated_Source\PSoC5/UART.c ****     *  Places a byte of data into the transmit buffer to be sent when the bus is
 920:.\Generated_Source\PSoC5/UART.c ****     *  available without checking the TX status register. You must check status
 921:.\Generated_Source\PSoC5/UART.c ****     *  separately.
 922:.\Generated_Source\PSoC5/UART.c ****     *
 923:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
 924:.\Generated_Source\PSoC5/UART.c ****     *  txDataByte: data byte
 925:.\Generated_Source\PSoC5/UART.c ****     *
 926:.\Generated_Source\PSoC5/UART.c ****     * Return:
 927:.\Generated_Source\PSoC5/UART.c ****     * None.
 928:.\Generated_Source\PSoC5/UART.c ****     *
 929:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
 930:.\Generated_Source\PSoC5/UART.c ****     *  UART_txBuffer - RAM buffer pointer for save data for transmission
 931:.\Generated_Source\PSoC5/UART.c ****     *  UART_txBufferWrite - cyclic index for write to txBuffer,
 932:.\Generated_Source\PSoC5/UART.c ****     *    incremented after each byte saved to buffer.
 933:.\Generated_Source\PSoC5/UART.c ****     *  UART_txBufferRead - cyclic index for read from txBuffer,
 934:.\Generated_Source\PSoC5/UART.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 935:.\Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
 936:.\Generated_Source\PSoC5/UART.c ****     *    initialized.
 937:.\Generated_Source\PSoC5/UART.c ****     *
 938:.\Generated_Source\PSoC5/UART.c ****     * Reentrant:
 939:.\Generated_Source\PSoC5/UART.c ****     *  No.
 940:.\Generated_Source\PSoC5/UART.c ****     *
 941:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
 942:.\Generated_Source\PSoC5/UART.c ****     void UART_WriteTxData(uint8 txDataByte) 
 943:.\Generated_Source\PSoC5/UART.c ****     {
 245              		.loc 1 943 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249              		@ link register save eliminated.
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 22


 250              	.LVL14:
 944:.\Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function*/
 945:.\Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 251              		.loc 1 945 0
 252 0000 024B     		ldr	r3, .L24
 253 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 254 0004 0BB1     		cbz	r3, .L22
 946:.\Generated_Source\PSoC5/UART.c ****         {
 947:.\Generated_Source\PSoC5/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 948:.\Generated_Source\PSoC5/UART.c **** 
 949:.\Generated_Source\PSoC5/UART.c ****             /* Protect variables that could change on interrupt. */
 950:.\Generated_Source\PSoC5/UART.c ****             UART_DisableTxInt();
 951:.\Generated_Source\PSoC5/UART.c **** 
 952:.\Generated_Source\PSoC5/UART.c ****             if( (UART_txBufferRead == UART_txBufferWrite) &&
 953:.\Generated_Source\PSoC5/UART.c ****                 ((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) == 0u) )
 954:.\Generated_Source\PSoC5/UART.c ****             {
 955:.\Generated_Source\PSoC5/UART.c ****                 /* Add directly to the FIFO. */
 956:.\Generated_Source\PSoC5/UART.c ****                 UART_TXDATA_REG = txDataByte;
 957:.\Generated_Source\PSoC5/UART.c ****             }
 958:.\Generated_Source\PSoC5/UART.c ****             else
 959:.\Generated_Source\PSoC5/UART.c ****             {
 960:.\Generated_Source\PSoC5/UART.c ****                 if(UART_txBufferWrite >= UART_TX_BUFFER_SIZE)
 961:.\Generated_Source\PSoC5/UART.c ****                 {
 962:.\Generated_Source\PSoC5/UART.c ****                     UART_txBufferWrite = 0u;
 963:.\Generated_Source\PSoC5/UART.c ****                 }
 964:.\Generated_Source\PSoC5/UART.c **** 
 965:.\Generated_Source\PSoC5/UART.c ****                 UART_txBuffer[UART_txBufferWrite] = txDataByte;
 966:.\Generated_Source\PSoC5/UART.c **** 
 967:.\Generated_Source\PSoC5/UART.c ****                 /* Add to the software buffer. */
 968:.\Generated_Source\PSoC5/UART.c ****                 UART_txBufferWrite++;
 969:.\Generated_Source\PSoC5/UART.c ****             }
 970:.\Generated_Source\PSoC5/UART.c **** 
 971:.\Generated_Source\PSoC5/UART.c ****             UART_EnableTxInt();
 972:.\Generated_Source\PSoC5/UART.c **** 
 973:.\Generated_Source\PSoC5/UART.c ****         #else
 974:.\Generated_Source\PSoC5/UART.c **** 
 975:.\Generated_Source\PSoC5/UART.c ****             /* Add directly to the FIFO. */
 976:.\Generated_Source\PSoC5/UART.c ****             UART_TXDATA_REG = txDataByte;
 255              		.loc 1 976 0
 256 0006 024B     		ldr	r3, .L24+4
 257 0008 1870     		strb	r0, [r3]
 258              	.L22:
 259 000a 7047     		bx	lr
 260              	.L25:
 261              		.align	2
 262              	.L24:
 263 000c 00000000 		.word	.LANCHOR0
 264 0010 43640040 		.word	1073767491
 265              		.cfi_endproc
 266              	.LFE7:
 267              		.size	UART_WriteTxData, .-UART_WriteTxData
 268              		.section	.text.UART_ReadTxStatus,"ax",%progbits
 269              		.align	2
 270              		.global	UART_ReadTxStatus
 271              		.thumb
 272              		.thumb_func
 273              		.type	UART_ReadTxStatus, %function
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 23


 274              	UART_ReadTxStatus:
 275              	.LFB8:
 977:.\Generated_Source\PSoC5/UART.c **** 
 978:.\Generated_Source\PSoC5/UART.c ****         #endif /*(UART_TX_INTERRUPT_ENABLED) */
 979:.\Generated_Source\PSoC5/UART.c ****         }
 980:.\Generated_Source\PSoC5/UART.c ****     }
 981:.\Generated_Source\PSoC5/UART.c **** 
 982:.\Generated_Source\PSoC5/UART.c **** 
 983:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
 984:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ReadTxStatus
 985:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
 986:.\Generated_Source\PSoC5/UART.c ****     *
 987:.\Generated_Source\PSoC5/UART.c ****     * Summary:
 988:.\Generated_Source\PSoC5/UART.c ****     *  Reads the status register for the TX portion of the UART.
 989:.\Generated_Source\PSoC5/UART.c ****     *
 990:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
 991:.\Generated_Source\PSoC5/UART.c ****     *  None.
 992:.\Generated_Source\PSoC5/UART.c ****     *
 993:.\Generated_Source\PSoC5/UART.c ****     * Return:
 994:.\Generated_Source\PSoC5/UART.c ****     *  Contents of the status register
 995:.\Generated_Source\PSoC5/UART.c ****     *
 996:.\Generated_Source\PSoC5/UART.c ****     * Theory:
 997:.\Generated_Source\PSoC5/UART.c ****     *  This function reads the TX status register, which is cleared on read.
 998:.\Generated_Source\PSoC5/UART.c ****     *  It is up to the user to handle all bits in this return value accordingly,
 999:.\Generated_Source\PSoC5/UART.c ****     *  even if the bit was not enabled as an interrupt source the event happened
1000:.\Generated_Source\PSoC5/UART.c ****     *  and must be handled accordingly.
1001:.\Generated_Source\PSoC5/UART.c ****     *
1002:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1003:.\Generated_Source\PSoC5/UART.c ****     uint8 UART_ReadTxStatus(void) 
1004:.\Generated_Source\PSoC5/UART.c ****     {
 276              		.loc 1 1004 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              		@ link register save eliminated.
1005:.\Generated_Source\PSoC5/UART.c ****         return(UART_TXSTATUS_REG);
 281              		.loc 1 1005 0
 282 0000 014B     		ldr	r3, .L27
 283 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
1006:.\Generated_Source\PSoC5/UART.c ****     }
 284              		.loc 1 1006 0
 285 0004 7047     		bx	lr
 286              	.L28:
 287 0006 00BF     		.align	2
 288              	.L27:
 289 0008 64640040 		.word	1073767524
 290              		.cfi_endproc
 291              	.LFE8:
 292              		.size	UART_ReadTxStatus, .-UART_ReadTxStatus
 293              		.section	.text.UART_PutChar,"ax",%progbits
 294              		.align	2
 295              		.global	UART_PutChar
 296              		.thumb
 297              		.thumb_func
 298              		.type	UART_PutChar, %function
 299              	UART_PutChar:
 300              	.LFB9:
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 24


1007:.\Generated_Source\PSoC5/UART.c **** 
1008:.\Generated_Source\PSoC5/UART.c **** 
1009:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1010:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_PutChar
1011:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1012:.\Generated_Source\PSoC5/UART.c ****     *
1013:.\Generated_Source\PSoC5/UART.c ****     * Summary:
1014:.\Generated_Source\PSoC5/UART.c ****     *  Puts a byte of data into the transmit buffer to be sent when the bus is
1015:.\Generated_Source\PSoC5/UART.c ****     *  available. This is a blocking API that waits until the TX buffer has room to
1016:.\Generated_Source\PSoC5/UART.c ****     *  hold the data.
1017:.\Generated_Source\PSoC5/UART.c ****     *
1018:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
1019:.\Generated_Source\PSoC5/UART.c ****     *  txDataByte: Byte containing the data to transmit
1020:.\Generated_Source\PSoC5/UART.c ****     *
1021:.\Generated_Source\PSoC5/UART.c ****     * Return:
1022:.\Generated_Source\PSoC5/UART.c ****     *  None.
1023:.\Generated_Source\PSoC5/UART.c ****     *
1024:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
1025:.\Generated_Source\PSoC5/UART.c ****     *  UART_txBuffer - RAM buffer pointer for save data for transmission
1026:.\Generated_Source\PSoC5/UART.c ****     *  UART_txBufferWrite - cyclic index for write to txBuffer,
1027:.\Generated_Source\PSoC5/UART.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1028:.\Generated_Source\PSoC5/UART.c ****     *     saved to buffer.
1029:.\Generated_Source\PSoC5/UART.c ****     *  UART_txBufferRead - cyclic index for read from txBuffer,
1030:.\Generated_Source\PSoC5/UART.c ****     *     checked to identify free space in txBuffer.
1031:.\Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1032:.\Generated_Source\PSoC5/UART.c ****     *     initialized.
1033:.\Generated_Source\PSoC5/UART.c ****     *
1034:.\Generated_Source\PSoC5/UART.c ****     * Reentrant:
1035:.\Generated_Source\PSoC5/UART.c ****     *  No.
1036:.\Generated_Source\PSoC5/UART.c ****     *
1037:.\Generated_Source\PSoC5/UART.c ****     * Theory:
1038:.\Generated_Source\PSoC5/UART.c ****     *  Allows the user to transmit any byte of data in a single transfer
1039:.\Generated_Source\PSoC5/UART.c ****     *
1040:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1041:.\Generated_Source\PSoC5/UART.c ****     void UART_PutChar(uint8 txDataByte) 
1042:.\Generated_Source\PSoC5/UART.c ****     {
 301              		.loc 1 1042 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305              		@ link register save eliminated.
 306              	.LVL15:
 307              	.L30:
1043:.\Generated_Source\PSoC5/UART.c ****     #if (UART_TX_INTERRUPT_ENABLED)
1044:.\Generated_Source\PSoC5/UART.c ****         /* The temporary output pointer is used since it takes two instructions
1045:.\Generated_Source\PSoC5/UART.c ****         *  to increment with a wrap, and we can't risk doing that with the real
1046:.\Generated_Source\PSoC5/UART.c ****         *  pointer and getting an interrupt in between instructions.
1047:.\Generated_Source\PSoC5/UART.c ****         */
1048:.\Generated_Source\PSoC5/UART.c ****         uint8 locTxBufferWrite;
1049:.\Generated_Source\PSoC5/UART.c ****         uint8 locTxBufferRead;
1050:.\Generated_Source\PSoC5/UART.c **** 
1051:.\Generated_Source\PSoC5/UART.c ****         do
1052:.\Generated_Source\PSoC5/UART.c ****         { /* Block if software buffer is full, so we don't overwrite. */
1053:.\Generated_Source\PSoC5/UART.c **** 
1054:.\Generated_Source\PSoC5/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1055:.\Generated_Source\PSoC5/UART.c ****             /* Disable TX interrupt to protect variables from modification */
1056:.\Generated_Source\PSoC5/UART.c ****             UART_DisableTxInt();
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 25


1057:.\Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1058:.\Generated_Source\PSoC5/UART.c **** 
1059:.\Generated_Source\PSoC5/UART.c ****             locTxBufferWrite = UART_txBufferWrite;
1060:.\Generated_Source\PSoC5/UART.c ****             locTxBufferRead  = UART_txBufferRead;
1061:.\Generated_Source\PSoC5/UART.c **** 
1062:.\Generated_Source\PSoC5/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1063:.\Generated_Source\PSoC5/UART.c ****             /* Enable interrupt to continue transmission */
1064:.\Generated_Source\PSoC5/UART.c ****             UART_EnableTxInt();
1065:.\Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1066:.\Generated_Source\PSoC5/UART.c ****         }
1067:.\Generated_Source\PSoC5/UART.c ****         while( (locTxBufferWrite < locTxBufferRead) ? (locTxBufferWrite == (locTxBufferRead - 1u)) 
1068:.\Generated_Source\PSoC5/UART.c ****                                 ((locTxBufferWrite - locTxBufferRead) ==
1069:.\Generated_Source\PSoC5/UART.c ****                                 (uint8)(UART_TX_BUFFER_SIZE - 1u)) );
1070:.\Generated_Source\PSoC5/UART.c **** 
1071:.\Generated_Source\PSoC5/UART.c ****         if( (locTxBufferRead == locTxBufferWrite) &&
1072:.\Generated_Source\PSoC5/UART.c ****             ((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) == 0u) )
1073:.\Generated_Source\PSoC5/UART.c ****         {
1074:.\Generated_Source\PSoC5/UART.c ****             /* Add directly to the FIFO */
1075:.\Generated_Source\PSoC5/UART.c ****             UART_TXDATA_REG = txDataByte;
1076:.\Generated_Source\PSoC5/UART.c ****         }
1077:.\Generated_Source\PSoC5/UART.c ****         else
1078:.\Generated_Source\PSoC5/UART.c ****         {
1079:.\Generated_Source\PSoC5/UART.c ****             if(locTxBufferWrite >= UART_TX_BUFFER_SIZE)
1080:.\Generated_Source\PSoC5/UART.c ****             {
1081:.\Generated_Source\PSoC5/UART.c ****                 locTxBufferWrite = 0u;
1082:.\Generated_Source\PSoC5/UART.c ****             }
1083:.\Generated_Source\PSoC5/UART.c ****             /* Add to the software buffer. */
1084:.\Generated_Source\PSoC5/UART.c ****             UART_txBuffer[locTxBufferWrite] = txDataByte;
1085:.\Generated_Source\PSoC5/UART.c ****             locTxBufferWrite++;
1086:.\Generated_Source\PSoC5/UART.c **** 
1087:.\Generated_Source\PSoC5/UART.c ****             /* Finally, update the real output pointer */
1088:.\Generated_Source\PSoC5/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1089:.\Generated_Source\PSoC5/UART.c ****             UART_DisableTxInt();
1090:.\Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1091:.\Generated_Source\PSoC5/UART.c **** 
1092:.\Generated_Source\PSoC5/UART.c ****             UART_txBufferWrite = locTxBufferWrite;
1093:.\Generated_Source\PSoC5/UART.c **** 
1094:.\Generated_Source\PSoC5/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1095:.\Generated_Source\PSoC5/UART.c ****             UART_EnableTxInt();
1096:.\Generated_Source\PSoC5/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1097:.\Generated_Source\PSoC5/UART.c **** 
1098:.\Generated_Source\PSoC5/UART.c ****             if(0u != (UART_TXSTATUS_REG & UART_TX_STS_FIFO_EMPTY))
1099:.\Generated_Source\PSoC5/UART.c ****             {
1100:.\Generated_Source\PSoC5/UART.c ****                 /* Trigger TX interrupt to send software buffer */
1101:.\Generated_Source\PSoC5/UART.c ****                 UART_SetPendingTxInt();
1102:.\Generated_Source\PSoC5/UART.c ****             }
1103:.\Generated_Source\PSoC5/UART.c ****         }
1104:.\Generated_Source\PSoC5/UART.c **** 
1105:.\Generated_Source\PSoC5/UART.c ****     #else
1106:.\Generated_Source\PSoC5/UART.c **** 
1107:.\Generated_Source\PSoC5/UART.c ****         while((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) != 0u)
 308              		.loc 1 1107 0 discriminator 1
 309 0000 034B     		ldr	r3, .L31
 310 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 311 0004 13F0040F 		tst	r3, #4
 312 0008 FAD1     		bne	.L30
1108:.\Generated_Source\PSoC5/UART.c ****         {
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 26


1109:.\Generated_Source\PSoC5/UART.c ****             /* Wait for room in the FIFO */
1110:.\Generated_Source\PSoC5/UART.c ****         }
1111:.\Generated_Source\PSoC5/UART.c **** 
1112:.\Generated_Source\PSoC5/UART.c ****         /* Add directly to the FIFO */
1113:.\Generated_Source\PSoC5/UART.c ****         UART_TXDATA_REG = txDataByte;
 313              		.loc 1 1113 0
 314 000a 024B     		ldr	r3, .L31+4
 315 000c 1870     		strb	r0, [r3]
 316 000e 7047     		bx	lr
 317              	.L32:
 318              		.align	2
 319              	.L31:
 320 0010 64640040 		.word	1073767524
 321 0014 43640040 		.word	1073767491
 322              		.cfi_endproc
 323              	.LFE9:
 324              		.size	UART_PutChar, .-UART_PutChar
 325              		.section	.text.UART_PutString,"ax",%progbits
 326              		.align	2
 327              		.global	UART_PutString
 328              		.thumb
 329              		.thumb_func
 330              		.type	UART_PutString, %function
 331              	UART_PutString:
 332              	.LFB10:
1114:.\Generated_Source\PSoC5/UART.c **** 
1115:.\Generated_Source\PSoC5/UART.c ****     #endif /* UART_TX_INTERRUPT_ENABLED */
1116:.\Generated_Source\PSoC5/UART.c ****     }
1117:.\Generated_Source\PSoC5/UART.c **** 
1118:.\Generated_Source\PSoC5/UART.c **** 
1119:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1120:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_PutString
1121:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1122:.\Generated_Source\PSoC5/UART.c ****     *
1123:.\Generated_Source\PSoC5/UART.c ****     * Summary:
1124:.\Generated_Source\PSoC5/UART.c ****     *  Sends a NULL terminated string to the TX buffer for transmission.
1125:.\Generated_Source\PSoC5/UART.c ****     *
1126:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
1127:.\Generated_Source\PSoC5/UART.c ****     *  string[]: Pointer to the null terminated string array residing in RAM or ROM
1128:.\Generated_Source\PSoC5/UART.c ****     *
1129:.\Generated_Source\PSoC5/UART.c ****     * Return:
1130:.\Generated_Source\PSoC5/UART.c ****     *  None.
1131:.\Generated_Source\PSoC5/UART.c ****     *
1132:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
1133:.\Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1134:.\Generated_Source\PSoC5/UART.c ****     *     initialized.
1135:.\Generated_Source\PSoC5/UART.c ****     *
1136:.\Generated_Source\PSoC5/UART.c ****     * Reentrant:
1137:.\Generated_Source\PSoC5/UART.c ****     *  No.
1138:.\Generated_Source\PSoC5/UART.c ****     *
1139:.\Generated_Source\PSoC5/UART.c ****     * Theory:
1140:.\Generated_Source\PSoC5/UART.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1141:.\Generated_Source\PSoC5/UART.c ****     *  function blocks until the last character of the string is loaded into the
1142:.\Generated_Source\PSoC5/UART.c ****     *  TX buffer.
1143:.\Generated_Source\PSoC5/UART.c ****     *
1144:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1145:.\Generated_Source\PSoC5/UART.c ****     void UART_PutString(const char8 string[]) 
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 27


1146:.\Generated_Source\PSoC5/UART.c ****     {
 333              		.loc 1 1146 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337              	.LVL16:
 338 0000 38B5     		push	{r3, r4, r5, lr}
 339              		.cfi_def_cfa_offset 16
 340              		.cfi_offset 3, -16
 341              		.cfi_offset 4, -12
 342              		.cfi_offset 5, -8
 343              		.cfi_offset 14, -4
 344              	.LVL17:
1147:.\Generated_Source\PSoC5/UART.c ****         uint16 bufIndex = 0u;
1148:.\Generated_Source\PSoC5/UART.c **** 
1149:.\Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function */
1150:.\Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 345              		.loc 1 1150 0
 346 0002 074B     		ldr	r3, .L39
 347 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 348 0006 2BB9     		cbnz	r3, .L37
 349 0008 38BD     		pop	{r3, r4, r5, pc}
 350              	.LVL18:
 351              	.L36:
1151:.\Generated_Source\PSoC5/UART.c ****         {
1152:.\Generated_Source\PSoC5/UART.c ****             /* This is a blocking function, it will not exit until all data is sent */
1153:.\Generated_Source\PSoC5/UART.c ****             while(string[bufIndex] != (char8) 0)
1154:.\Generated_Source\PSoC5/UART.c ****             {
1155:.\Generated_Source\PSoC5/UART.c ****                 UART_PutChar((uint8)string[bufIndex]);
 352              		.loc 1 1155 0
 353 000a FFF7FEFF 		bl	UART_PutChar
 354              	.LVL19:
1156:.\Generated_Source\PSoC5/UART.c ****                 bufIndex++;
 355              		.loc 1 1156 0
 356 000e 0134     		adds	r4, r4, #1
 357              	.LVL20:
 358 0010 A4B2     		uxth	r4, r4
 359              	.LVL21:
 360 0012 01E0     		b	.L34
 361              	.LVL22:
 362              	.L37:
 363 0014 0546     		mov	r5, r0
 364 0016 0024     		movs	r4, #0
 365              	.LVL23:
 366              	.L34:
1153:.\Generated_Source\PSoC5/UART.c ****             {
 367              		.loc 1 1153 0
 368 0018 285D     		ldrb	r0, [r5, r4]	@ zero_extendqisi2
 369 001a 0028     		cmp	r0, #0
 370 001c F5D1     		bne	.L36
 371 001e 38BD     		pop	{r3, r4, r5, pc}
 372              	.LVL24:
 373              	.L40:
 374              		.align	2
 375              	.L39:
 376 0020 00000000 		.word	.LANCHOR0
 377              		.cfi_endproc
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 28


 378              	.LFE10:
 379              		.size	UART_PutString, .-UART_PutString
 380              		.section	.text.UART_PutArray,"ax",%progbits
 381              		.align	2
 382              		.global	UART_PutArray
 383              		.thumb
 384              		.thumb_func
 385              		.type	UART_PutArray, %function
 386              	UART_PutArray:
 387              	.LFB11:
1157:.\Generated_Source\PSoC5/UART.c ****             }
1158:.\Generated_Source\PSoC5/UART.c ****         }
1159:.\Generated_Source\PSoC5/UART.c ****     }
1160:.\Generated_Source\PSoC5/UART.c **** 
1161:.\Generated_Source\PSoC5/UART.c **** 
1162:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1163:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_PutArray
1164:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1165:.\Generated_Source\PSoC5/UART.c ****     *
1166:.\Generated_Source\PSoC5/UART.c ****     * Summary:
1167:.\Generated_Source\PSoC5/UART.c ****     *  Places N bytes of data from a memory array into the TX buffer for
1168:.\Generated_Source\PSoC5/UART.c ****     *  transmission.
1169:.\Generated_Source\PSoC5/UART.c ****     *
1170:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
1171:.\Generated_Source\PSoC5/UART.c ****     *  string[]: Address of the memory array residing in RAM or ROM.
1172:.\Generated_Source\PSoC5/UART.c ****     *  byteCount: Number of bytes to be transmitted. The type depends on TX Buffer
1173:.\Generated_Source\PSoC5/UART.c ****     *             Size parameter.
1174:.\Generated_Source\PSoC5/UART.c ****     *
1175:.\Generated_Source\PSoC5/UART.c ****     * Return:
1176:.\Generated_Source\PSoC5/UART.c ****     *  None.
1177:.\Generated_Source\PSoC5/UART.c ****     *
1178:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
1179:.\Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1180:.\Generated_Source\PSoC5/UART.c ****     *     initialized.
1181:.\Generated_Source\PSoC5/UART.c ****     *
1182:.\Generated_Source\PSoC5/UART.c ****     * Reentrant:
1183:.\Generated_Source\PSoC5/UART.c ****     *  No.
1184:.\Generated_Source\PSoC5/UART.c ****     *
1185:.\Generated_Source\PSoC5/UART.c ****     * Theory:
1186:.\Generated_Source\PSoC5/UART.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1187:.\Generated_Source\PSoC5/UART.c ****     *  function blocks until the last character of the string is loaded into the
1188:.\Generated_Source\PSoC5/UART.c ****     *  TX buffer.
1189:.\Generated_Source\PSoC5/UART.c ****     *
1190:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1191:.\Generated_Source\PSoC5/UART.c ****     void UART_PutArray(const uint8 string[], uint8 byteCount)
1192:.\Generated_Source\PSoC5/UART.c ****                                                                     
1193:.\Generated_Source\PSoC5/UART.c ****     {
 388              		.loc 1 1193 0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              	.LVL25:
1194:.\Generated_Source\PSoC5/UART.c ****         uint8 bufIndex = 0u;
1195:.\Generated_Source\PSoC5/UART.c **** 
1196:.\Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function */
1197:.\Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 393              		.loc 1 1197 0
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 29


 394 0000 084B     		ldr	r3, .L47
 395 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 396 0004 33B9     		cbnz	r3, .L45
 397 0006 7047     		bx	lr
 398              	.LVL26:
 399              	.L44:
 400              		.cfi_def_cfa_offset 16
 401              		.cfi_offset 4, -16
 402              		.cfi_offset 5, -12
 403              		.cfi_offset 6, -8
 404              		.cfi_offset 14, -4
1198:.\Generated_Source\PSoC5/UART.c ****         {
1199:.\Generated_Source\PSoC5/UART.c ****             while(bufIndex < byteCount)
1200:.\Generated_Source\PSoC5/UART.c ****             {
1201:.\Generated_Source\PSoC5/UART.c ****                 UART_PutChar(string[bufIndex]);
 405              		.loc 1 1201 0
 406 0008 305D     		ldrb	r0, [r6, r4]	@ zero_extendqisi2
 407 000a FFF7FEFF 		bl	UART_PutChar
 408              	.LVL27:
1202:.\Generated_Source\PSoC5/UART.c ****                 bufIndex++;
 409              		.loc 1 1202 0
 410 000e 0134     		adds	r4, r4, #1
 411              	.LVL28:
 412 0010 E4B2     		uxtb	r4, r4
 413              	.LVL29:
 414 0012 03E0     		b	.L42
 415              	.LVL30:
 416              	.L45:
 417              		.cfi_def_cfa_offset 0
 418              		.cfi_restore 4
 419              		.cfi_restore 5
 420              		.cfi_restore 6
 421              		.cfi_restore 14
1193:.\Generated_Source\PSoC5/UART.c ****         uint8 bufIndex = 0u;
 422              		.loc 1 1193 0
 423 0014 70B5     		push	{r4, r5, r6, lr}
 424              		.cfi_def_cfa_offset 16
 425              		.cfi_offset 4, -16
 426              		.cfi_offset 5, -12
 427              		.cfi_offset 6, -8
 428              		.cfi_offset 14, -4
 429 0016 0D46     		mov	r5, r1
 430 0018 0646     		mov	r6, r0
 431 001a 0024     		movs	r4, #0
 432              	.LVL31:
 433              	.L42:
1199:.\Generated_Source\PSoC5/UART.c ****             {
 434              		.loc 1 1199 0
 435 001c AC42     		cmp	r4, r5
 436 001e F3D3     		bcc	.L44
 437 0020 70BD     		pop	{r4, r5, r6, pc}
 438              	.LVL32:
 439              	.L48:
 440 0022 00BF     		.align	2
 441              	.L47:
 442 0024 00000000 		.word	.LANCHOR0
 443              		.cfi_endproc
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 30


 444              	.LFE11:
 445              		.size	UART_PutArray, .-UART_PutArray
 446              		.section	.text.UART_PutCRLF,"ax",%progbits
 447              		.align	2
 448              		.global	UART_PutCRLF
 449              		.thumb
 450              		.thumb_func
 451              		.type	UART_PutCRLF, %function
 452              	UART_PutCRLF:
 453              	.LFB12:
1203:.\Generated_Source\PSoC5/UART.c ****             }
1204:.\Generated_Source\PSoC5/UART.c ****         }
1205:.\Generated_Source\PSoC5/UART.c ****     }
1206:.\Generated_Source\PSoC5/UART.c **** 
1207:.\Generated_Source\PSoC5/UART.c **** 
1208:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1209:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_PutCRLF
1210:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1211:.\Generated_Source\PSoC5/UART.c ****     *
1212:.\Generated_Source\PSoC5/UART.c ****     * Summary:
1213:.\Generated_Source\PSoC5/UART.c ****     *  Writes a byte of data followed by a carriage return (0x0D) and line feed
1214:.\Generated_Source\PSoC5/UART.c ****     *  (0x0A) to the transmit buffer.
1215:.\Generated_Source\PSoC5/UART.c ****     *
1216:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
1217:.\Generated_Source\PSoC5/UART.c ****     *  txDataByte: Data byte to transmit before the carriage return and line feed.
1218:.\Generated_Source\PSoC5/UART.c ****     *
1219:.\Generated_Source\PSoC5/UART.c ****     * Return:
1220:.\Generated_Source\PSoC5/UART.c ****     *  None.
1221:.\Generated_Source\PSoC5/UART.c ****     *
1222:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
1223:.\Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1224:.\Generated_Source\PSoC5/UART.c ****     *     initialized.
1225:.\Generated_Source\PSoC5/UART.c ****     *
1226:.\Generated_Source\PSoC5/UART.c ****     * Reentrant:
1227:.\Generated_Source\PSoC5/UART.c ****     *  No.
1228:.\Generated_Source\PSoC5/UART.c ****     *
1229:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1230:.\Generated_Source\PSoC5/UART.c ****     void UART_PutCRLF(uint8 txDataByte) 
1231:.\Generated_Source\PSoC5/UART.c ****     {
 454              		.loc 1 1231 0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 458              	.LVL33:
 459 0000 08B5     		push	{r3, lr}
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 3, -8
 462              		.cfi_offset 14, -4
1232:.\Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function */
1233:.\Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 463              		.loc 1 1233 0
 464 0002 064B     		ldr	r3, .L52
 465 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 466 0006 3BB1     		cbz	r3, .L49
1234:.\Generated_Source\PSoC5/UART.c ****         {
1235:.\Generated_Source\PSoC5/UART.c ****             UART_PutChar(txDataByte);
 467              		.loc 1 1235 0
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 31


 468 0008 FFF7FEFF 		bl	UART_PutChar
 469              	.LVL34:
1236:.\Generated_Source\PSoC5/UART.c ****             UART_PutChar(0x0Du);
 470              		.loc 1 1236 0
 471 000c 0D20     		movs	r0, #13
 472 000e FFF7FEFF 		bl	UART_PutChar
 473              	.LVL35:
1237:.\Generated_Source\PSoC5/UART.c ****             UART_PutChar(0x0Au);
 474              		.loc 1 1237 0
 475 0012 0A20     		movs	r0, #10
 476 0014 FFF7FEFF 		bl	UART_PutChar
 477              	.LVL36:
 478              	.L49:
 479 0018 08BD     		pop	{r3, pc}
 480              	.L53:
 481 001a 00BF     		.align	2
 482              	.L52:
 483 001c 00000000 		.word	.LANCHOR0
 484              		.cfi_endproc
 485              	.LFE12:
 486              		.size	UART_PutCRLF, .-UART_PutCRLF
 487              		.section	.text.UART_GetTxBufferSize,"ax",%progbits
 488              		.align	2
 489              		.global	UART_GetTxBufferSize
 490              		.thumb
 491              		.thumb_func
 492              		.type	UART_GetTxBufferSize, %function
 493              	UART_GetTxBufferSize:
 494              	.LFB13:
1238:.\Generated_Source\PSoC5/UART.c ****         }
1239:.\Generated_Source\PSoC5/UART.c ****     }
1240:.\Generated_Source\PSoC5/UART.c **** 
1241:.\Generated_Source\PSoC5/UART.c **** 
1242:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1243:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_GetTxBufferSize
1244:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1245:.\Generated_Source\PSoC5/UART.c ****     *
1246:.\Generated_Source\PSoC5/UART.c ****     * Summary:
1247:.\Generated_Source\PSoC5/UART.c ****     *  Returns the number of bytes in the TX buffer which are waiting to be 
1248:.\Generated_Source\PSoC5/UART.c ****     *  transmitted.
1249:.\Generated_Source\PSoC5/UART.c ****     *  * TX software buffer is disabled (TX Buffer Size parameter is equal to 4): 
1250:.\Generated_Source\PSoC5/UART.c ****     *    returns 0 for empty TX FIFO, 1 for not full TX FIFO or 4 for full TX FIFO.
1251:.\Generated_Source\PSoC5/UART.c ****     *  * TX software buffer is enabled: returns the number of bytes in the TX 
1252:.\Generated_Source\PSoC5/UART.c ****     *    software buffer which are waiting to be transmitted. Bytes available in the
1253:.\Generated_Source\PSoC5/UART.c ****     *    TX FIFO do not count.
1254:.\Generated_Source\PSoC5/UART.c ****     *
1255:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
1256:.\Generated_Source\PSoC5/UART.c ****     *  None.
1257:.\Generated_Source\PSoC5/UART.c ****     *
1258:.\Generated_Source\PSoC5/UART.c ****     * Return:
1259:.\Generated_Source\PSoC5/UART.c ****     *  Number of bytes used in the TX buffer. Return value type depends on the TX 
1260:.\Generated_Source\PSoC5/UART.c ****     *  Buffer Size parameter.
1261:.\Generated_Source\PSoC5/UART.c ****     *
1262:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
1263:.\Generated_Source\PSoC5/UART.c ****     *  UART_txBufferWrite - used to calculate left space.
1264:.\Generated_Source\PSoC5/UART.c ****     *  UART_txBufferRead - used to calculate left space.
1265:.\Generated_Source\PSoC5/UART.c ****     *
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 32


1266:.\Generated_Source\PSoC5/UART.c ****     * Reentrant:
1267:.\Generated_Source\PSoC5/UART.c ****     *  No.
1268:.\Generated_Source\PSoC5/UART.c ****     *
1269:.\Generated_Source\PSoC5/UART.c ****     * Theory:
1270:.\Generated_Source\PSoC5/UART.c ****     *  Allows the user to find out how full the TX Buffer is.
1271:.\Generated_Source\PSoC5/UART.c ****     *
1272:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1273:.\Generated_Source\PSoC5/UART.c ****     uint8 UART_GetTxBufferSize(void)
1274:.\Generated_Source\PSoC5/UART.c ****                                                             
1275:.\Generated_Source\PSoC5/UART.c ****     {
 495              		.loc 1 1275 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499              		@ link register save eliminated.
1276:.\Generated_Source\PSoC5/UART.c ****         uint8 size;
1277:.\Generated_Source\PSoC5/UART.c **** 
1278:.\Generated_Source\PSoC5/UART.c ****     #if (UART_TX_INTERRUPT_ENABLED)
1279:.\Generated_Source\PSoC5/UART.c **** 
1280:.\Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt. */
1281:.\Generated_Source\PSoC5/UART.c ****         UART_DisableTxInt();
1282:.\Generated_Source\PSoC5/UART.c **** 
1283:.\Generated_Source\PSoC5/UART.c ****         if(UART_txBufferRead == UART_txBufferWrite)
1284:.\Generated_Source\PSoC5/UART.c ****         {
1285:.\Generated_Source\PSoC5/UART.c ****             size = 0u;
1286:.\Generated_Source\PSoC5/UART.c ****         }
1287:.\Generated_Source\PSoC5/UART.c ****         else if(UART_txBufferRead < UART_txBufferWrite)
1288:.\Generated_Source\PSoC5/UART.c ****         {
1289:.\Generated_Source\PSoC5/UART.c ****             size = (UART_txBufferWrite - UART_txBufferRead);
1290:.\Generated_Source\PSoC5/UART.c ****         }
1291:.\Generated_Source\PSoC5/UART.c ****         else
1292:.\Generated_Source\PSoC5/UART.c ****         {
1293:.\Generated_Source\PSoC5/UART.c ****             size = (UART_TX_BUFFER_SIZE - UART_txBufferRead) +
1294:.\Generated_Source\PSoC5/UART.c ****                     UART_txBufferWrite;
1295:.\Generated_Source\PSoC5/UART.c ****         }
1296:.\Generated_Source\PSoC5/UART.c **** 
1297:.\Generated_Source\PSoC5/UART.c ****         UART_EnableTxInt();
1298:.\Generated_Source\PSoC5/UART.c **** 
1299:.\Generated_Source\PSoC5/UART.c ****     #else
1300:.\Generated_Source\PSoC5/UART.c **** 
1301:.\Generated_Source\PSoC5/UART.c ****         size = UART_TXSTATUS_REG;
 500              		.loc 1 1301 0
 501 0000 074B     		ldr	r3, .L58
 502 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 503 0004 DBB2     		uxtb	r3, r3
 504              	.LVL37:
1302:.\Generated_Source\PSoC5/UART.c **** 
1303:.\Generated_Source\PSoC5/UART.c ****         /* Is the fifo is full. */
1304:.\Generated_Source\PSoC5/UART.c ****         if((size & UART_TX_STS_FIFO_FULL) != 0u)
 505              		.loc 1 1304 0
 506 0006 13F0040F 		tst	r3, #4
 507 000a 04D1     		bne	.L56
1305:.\Generated_Source\PSoC5/UART.c ****         {
1306:.\Generated_Source\PSoC5/UART.c ****             size = UART_FIFO_LENGTH;
1307:.\Generated_Source\PSoC5/UART.c ****         }
1308:.\Generated_Source\PSoC5/UART.c ****         else if((size & UART_TX_STS_FIFO_EMPTY) != 0u)
 508              		.loc 1 1308 0
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 33


 509 000c 13F0020F 		tst	r3, #2
 510 0010 03D0     		beq	.L57
1309:.\Generated_Source\PSoC5/UART.c ****         {
1310:.\Generated_Source\PSoC5/UART.c ****             size = 0u;
 511              		.loc 1 1310 0
 512 0012 0020     		movs	r0, #0
 513 0014 7047     		bx	lr
 514              	.L56:
1306:.\Generated_Source\PSoC5/UART.c ****         }
 515              		.loc 1 1306 0
 516 0016 0420     		movs	r0, #4
 517 0018 7047     		bx	lr
 518              	.L57:
1311:.\Generated_Source\PSoC5/UART.c ****         }
1312:.\Generated_Source\PSoC5/UART.c ****         else
1313:.\Generated_Source\PSoC5/UART.c ****         {
1314:.\Generated_Source\PSoC5/UART.c ****             /* We only know there is data in the fifo. */
1315:.\Generated_Source\PSoC5/UART.c ****             size = 1u;
 519              		.loc 1 1315 0
 520 001a 0120     		movs	r0, #1
 521              	.LVL38:
1316:.\Generated_Source\PSoC5/UART.c ****         }
1317:.\Generated_Source\PSoC5/UART.c **** 
1318:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_TX_INTERRUPT_ENABLED) */
1319:.\Generated_Source\PSoC5/UART.c **** 
1320:.\Generated_Source\PSoC5/UART.c ****     return(size);
1321:.\Generated_Source\PSoC5/UART.c ****     }
 522              		.loc 1 1321 0
 523 001c 7047     		bx	lr
 524              	.L59:
 525 001e 00BF     		.align	2
 526              	.L58:
 527 0020 64640040 		.word	1073767524
 528              		.cfi_endproc
 529              	.LFE13:
 530              		.size	UART_GetTxBufferSize, .-UART_GetTxBufferSize
 531              		.section	.text.UART_ClearTxBuffer,"ax",%progbits
 532              		.align	2
 533              		.global	UART_ClearTxBuffer
 534              		.thumb
 535              		.thumb_func
 536              		.type	UART_ClearTxBuffer, %function
 537              	UART_ClearTxBuffer:
 538              	.LFB14:
1322:.\Generated_Source\PSoC5/UART.c **** 
1323:.\Generated_Source\PSoC5/UART.c **** 
1324:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1325:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_ClearTxBuffer
1326:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1327:.\Generated_Source\PSoC5/UART.c ****     *
1328:.\Generated_Source\PSoC5/UART.c ****     * Summary:
1329:.\Generated_Source\PSoC5/UART.c ****     *  Clears all data from the TX buffer and hardware TX FIFO.
1330:.\Generated_Source\PSoC5/UART.c ****     *
1331:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
1332:.\Generated_Source\PSoC5/UART.c ****     *  None.
1333:.\Generated_Source\PSoC5/UART.c ****     *
1334:.\Generated_Source\PSoC5/UART.c ****     * Return:
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 34


1335:.\Generated_Source\PSoC5/UART.c ****     *  None.
1336:.\Generated_Source\PSoC5/UART.c ****     *
1337:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
1338:.\Generated_Source\PSoC5/UART.c ****     *  UART_txBufferWrite - cleared to zero.
1339:.\Generated_Source\PSoC5/UART.c ****     *  UART_txBufferRead - cleared to zero.
1340:.\Generated_Source\PSoC5/UART.c ****     *
1341:.\Generated_Source\PSoC5/UART.c ****     * Reentrant:
1342:.\Generated_Source\PSoC5/UART.c ****     *  No.
1343:.\Generated_Source\PSoC5/UART.c ****     *
1344:.\Generated_Source\PSoC5/UART.c ****     * Theory:
1345:.\Generated_Source\PSoC5/UART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1346:.\Generated_Source\PSoC5/UART.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1347:.\Generated_Source\PSoC5/UART.c ****     *  remained in the RAM.
1348:.\Generated_Source\PSoC5/UART.c ****     *
1349:.\Generated_Source\PSoC5/UART.c ****     * Side Effects:
1350:.\Generated_Source\PSoC5/UART.c ****     *  Data waiting in the transmit buffer is not sent; a byte that is currently
1351:.\Generated_Source\PSoC5/UART.c ****     *  transmitting finishes transmitting.
1352:.\Generated_Source\PSoC5/UART.c ****     *
1353:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1354:.\Generated_Source\PSoC5/UART.c ****     void UART_ClearTxBuffer(void) 
1355:.\Generated_Source\PSoC5/UART.c ****     {
 539              		.loc 1 1355 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 0
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543 0000 08B5     		push	{r3, lr}
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 3, -8
 546              		.cfi_offset 14, -4
1356:.\Generated_Source\PSoC5/UART.c ****         uint8 enableInterrupts;
1357:.\Generated_Source\PSoC5/UART.c **** 
1358:.\Generated_Source\PSoC5/UART.c ****         enableInterrupts = CyEnterCriticalSection();
 547              		.loc 1 1358 0
 548 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 549              	.LVL39:
1359:.\Generated_Source\PSoC5/UART.c ****         /* Clear the HW FIFO */
1360:.\Generated_Source\PSoC5/UART.c ****         UART_TXDATA_AUX_CTL_REG |= (uint8)  UART_TX_FIFO_CLR;
 550              		.loc 1 1360 0
 551 0006 064B     		ldr	r3, .L62
 552 0008 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 553 000a 42F00102 		orr	r2, r2, #1
 554 000e 1A70     		strb	r2, [r3]
1361:.\Generated_Source\PSoC5/UART.c ****         UART_TXDATA_AUX_CTL_REG &= (uint8) ~UART_TX_FIFO_CLR;
 555              		.loc 1 1361 0
 556 0010 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 557 0012 02F0FE02 		and	r2, r2, #254
 558 0016 1A70     		strb	r2, [r3]
1362:.\Generated_Source\PSoC5/UART.c ****         CyExitCriticalSection(enableInterrupts);
 559              		.loc 1 1362 0
 560 0018 FFF7FEFF 		bl	CyExitCriticalSection
 561              	.LVL40:
 562 001c 08BD     		pop	{r3, pc}
 563              	.L63:
 564 001e 00BF     		.align	2
 565              	.L62:
 566 0020 93640040 		.word	1073767571
 567              		.cfi_endproc
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 35


 568              	.LFE14:
 569              		.size	UART_ClearTxBuffer, .-UART_ClearTxBuffer
 570              		.section	.text.UART_SendBreak,"ax",%progbits
 571              		.align	2
 572              		.global	UART_SendBreak
 573              		.thumb
 574              		.thumb_func
 575              		.type	UART_SendBreak, %function
 576              	UART_SendBreak:
 577              	.LFB15:
1363:.\Generated_Source\PSoC5/UART.c **** 
1364:.\Generated_Source\PSoC5/UART.c ****     #if (UART_TX_INTERRUPT_ENABLED)
1365:.\Generated_Source\PSoC5/UART.c **** 
1366:.\Generated_Source\PSoC5/UART.c ****         /* Protect variables that could change on interrupt. */
1367:.\Generated_Source\PSoC5/UART.c ****         UART_DisableTxInt();
1368:.\Generated_Source\PSoC5/UART.c **** 
1369:.\Generated_Source\PSoC5/UART.c ****         UART_txBufferRead = 0u;
1370:.\Generated_Source\PSoC5/UART.c ****         UART_txBufferWrite = 0u;
1371:.\Generated_Source\PSoC5/UART.c **** 
1372:.\Generated_Source\PSoC5/UART.c ****         /* Enable Tx interrupt. */
1373:.\Generated_Source\PSoC5/UART.c ****         UART_EnableTxInt();
1374:.\Generated_Source\PSoC5/UART.c **** 
1375:.\Generated_Source\PSoC5/UART.c ****     #endif /* (UART_TX_INTERRUPT_ENABLED) */
1376:.\Generated_Source\PSoC5/UART.c ****     }
1377:.\Generated_Source\PSoC5/UART.c **** 
1378:.\Generated_Source\PSoC5/UART.c **** 
1379:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1380:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SendBreak
1381:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1382:.\Generated_Source\PSoC5/UART.c ****     *
1383:.\Generated_Source\PSoC5/UART.c ****     * Summary:
1384:.\Generated_Source\PSoC5/UART.c ****     *  Transmits a break signal on the bus.
1385:.\Generated_Source\PSoC5/UART.c ****     *
1386:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
1387:.\Generated_Source\PSoC5/UART.c ****     *  uint8 retMode:  Send Break return mode. See the following table for options.
1388:.\Generated_Source\PSoC5/UART.c ****     *   UART_SEND_BREAK - Initialize registers for break, send the Break
1389:.\Generated_Source\PSoC5/UART.c ****     *       signal and return immediately.
1390:.\Generated_Source\PSoC5/UART.c ****     *   UART_WAIT_FOR_COMPLETE_REINIT - Wait until break transmission is
1391:.\Generated_Source\PSoC5/UART.c ****     *       complete, reinitialize registers to normal transmission mode then return
1392:.\Generated_Source\PSoC5/UART.c ****     *   UART_REINIT - Reinitialize registers to normal transmission mode
1393:.\Generated_Source\PSoC5/UART.c ****     *       then return.
1394:.\Generated_Source\PSoC5/UART.c ****     *   UART_SEND_WAIT_REINIT - Performs both options: 
1395:.\Generated_Source\PSoC5/UART.c ****     *      UART_SEND_BREAK and UART_WAIT_FOR_COMPLETE_REINIT.
1396:.\Generated_Source\PSoC5/UART.c ****     *      This option is recommended for most cases.
1397:.\Generated_Source\PSoC5/UART.c ****     *
1398:.\Generated_Source\PSoC5/UART.c ****     * Return:
1399:.\Generated_Source\PSoC5/UART.c ****     *  None.
1400:.\Generated_Source\PSoC5/UART.c ****     *
1401:.\Generated_Source\PSoC5/UART.c ****     * Global Variables:
1402:.\Generated_Source\PSoC5/UART.c ****     *  UART_initVar - checked to identify that the component has been
1403:.\Generated_Source\PSoC5/UART.c ****     *     initialized.
1404:.\Generated_Source\PSoC5/UART.c ****     *  txPeriod - static variable, used for keeping TX period configuration.
1405:.\Generated_Source\PSoC5/UART.c ****     *
1406:.\Generated_Source\PSoC5/UART.c ****     * Reentrant:
1407:.\Generated_Source\PSoC5/UART.c ****     *  No.
1408:.\Generated_Source\PSoC5/UART.c ****     *
1409:.\Generated_Source\PSoC5/UART.c ****     * Theory:
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 36


1410:.\Generated_Source\PSoC5/UART.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1411:.\Generated_Source\PSoC5/UART.c ****     *  important to return the registers configuration to normal for continue 8-bit
1412:.\Generated_Source\PSoC5/UART.c ****     *  operation.
1413:.\Generated_Source\PSoC5/UART.c ****     *  There are 3 variants for this API usage:
1414:.\Generated_Source\PSoC5/UART.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1415:.\Generated_Source\PSoC5/UART.c ****     *     configuration returning. Function will block CPU until transmission
1416:.\Generated_Source\PSoC5/UART.c ****     *     complete.
1417:.\Generated_Source\PSoC5/UART.c ****     *  2) User may want to use blocking time if UART configured to the low speed
1418:.\Generated_Source\PSoC5/UART.c ****     *     operation
1419:.\Generated_Source\PSoC5/UART.c ****     *     Example for this case:
1420:.\Generated_Source\PSoC5/UART.c ****     *     SendBreak(0);     - initialize Break signal transmission
1421:.\Generated_Source\PSoC5/UART.c ****     *         Add your code here to use CPU time
1422:.\Generated_Source\PSoC5/UART.c ****     *     SendBreak(1);     - complete Break operation
1423:.\Generated_Source\PSoC5/UART.c ****     *  3) Same to 2) but user may want to initialize and use the interrupt to
1424:.\Generated_Source\PSoC5/UART.c ****     *     complete break operation.
1425:.\Generated_Source\PSoC5/UART.c ****     *     Example for this case:
1426:.\Generated_Source\PSoC5/UART.c ****     *     Initialize TX interrupt with "TX - On TX Complete" parameter
1427:.\Generated_Source\PSoC5/UART.c ****     *     SendBreak(0);     - initialize Break signal transmission
1428:.\Generated_Source\PSoC5/UART.c ****     *         Add your code here to use CPU time
1429:.\Generated_Source\PSoC5/UART.c ****     *     When interrupt appear with UART_TX_STS_COMPLETE status:
1430:.\Generated_Source\PSoC5/UART.c ****     *     SendBreak(2);     - complete Break operation
1431:.\Generated_Source\PSoC5/UART.c ****     *
1432:.\Generated_Source\PSoC5/UART.c ****     * Side Effects:
1433:.\Generated_Source\PSoC5/UART.c ****     *  The UART_SendBreak() function initializes registers to send a
1434:.\Generated_Source\PSoC5/UART.c ****     *  break signal.
1435:.\Generated_Source\PSoC5/UART.c ****     *  Break signal length depends on the break signal bits configuration.
1436:.\Generated_Source\PSoC5/UART.c ****     *  The register configuration should be reinitialized before normal 8-bit
1437:.\Generated_Source\PSoC5/UART.c ****     *  communication can continue.
1438:.\Generated_Source\PSoC5/UART.c ****     *
1439:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1440:.\Generated_Source\PSoC5/UART.c ****     void UART_SendBreak(uint8 retMode) 
1441:.\Generated_Source\PSoC5/UART.c ****     {
 578              		.loc 1 1441 0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 582              		@ link register save eliminated.
 583              	.LVL41:
1442:.\Generated_Source\PSoC5/UART.c **** 
1443:.\Generated_Source\PSoC5/UART.c ****         /* If not Initialized then skip this function*/
1444:.\Generated_Source\PSoC5/UART.c ****         if(UART_initVar != 0u)
 584              		.loc 1 1444 0
 585 0000 124B     		ldr	r3, .L71
 586 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 587 0004 0BB3     		cbz	r3, .L64
 588              	.LBB2:
1445:.\Generated_Source\PSoC5/UART.c ****         {
1446:.\Generated_Source\PSoC5/UART.c ****             /* Set the Counter to 13-bits and transmit a 00 byte */
1447:.\Generated_Source\PSoC5/UART.c ****             /* When that is done then reset the counter value back */
1448:.\Generated_Source\PSoC5/UART.c ****             uint8 tmpStat;
1449:.\Generated_Source\PSoC5/UART.c **** 
1450:.\Generated_Source\PSoC5/UART.c ****         #if(UART_HD_ENABLED) /* Half Duplex mode*/
1451:.\Generated_Source\PSoC5/UART.c **** 
1452:.\Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_SEND_BREAK) ||
1453:.\Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT ) )
1454:.\Generated_Source\PSoC5/UART.c ****             {
1455:.\Generated_Source\PSoC5/UART.c ****                 /* CTRL_HD_SEND_BREAK - sends break bits in HD mode */
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 37


1456:.\Generated_Source\PSoC5/UART.c ****                 UART_WriteControlRegister(UART_ReadControlRegister() |
1457:.\Generated_Source\PSoC5/UART.c ****                                                       UART_CTRL_HD_SEND_BREAK);
1458:.\Generated_Source\PSoC5/UART.c ****                 /* Send zeros */
1459:.\Generated_Source\PSoC5/UART.c ****                 UART_TXDATA_REG = 0u;
1460:.\Generated_Source\PSoC5/UART.c **** 
1461:.\Generated_Source\PSoC5/UART.c ****                 do /* Wait until transmit starts */
1462:.\Generated_Source\PSoC5/UART.c ****                 {
1463:.\Generated_Source\PSoC5/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
1464:.\Generated_Source\PSoC5/UART.c ****                 }
1465:.\Generated_Source\PSoC5/UART.c ****                 while((tmpStat & UART_TX_STS_FIFO_EMPTY) != 0u);
1466:.\Generated_Source\PSoC5/UART.c ****             }
1467:.\Generated_Source\PSoC5/UART.c **** 
1468:.\Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
1469:.\Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1470:.\Generated_Source\PSoC5/UART.c ****             {
1471:.\Generated_Source\PSoC5/UART.c ****                 do /* Wait until transmit complete */
1472:.\Generated_Source\PSoC5/UART.c ****                 {
1473:.\Generated_Source\PSoC5/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
1474:.\Generated_Source\PSoC5/UART.c ****                 }
1475:.\Generated_Source\PSoC5/UART.c ****                 while(((uint8)~tmpStat & UART_TX_STS_COMPLETE) != 0u);
1476:.\Generated_Source\PSoC5/UART.c ****             }
1477:.\Generated_Source\PSoC5/UART.c **** 
1478:.\Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
1479:.\Generated_Source\PSoC5/UART.c ****                 (retMode == UART_REINIT) ||
1480:.\Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1481:.\Generated_Source\PSoC5/UART.c ****             {
1482:.\Generated_Source\PSoC5/UART.c ****                 UART_WriteControlRegister(UART_ReadControlRegister() &
1483:.\Generated_Source\PSoC5/UART.c ****                                               (uint8)~UART_CTRL_HD_SEND_BREAK);
1484:.\Generated_Source\PSoC5/UART.c ****             }
1485:.\Generated_Source\PSoC5/UART.c **** 
1486:.\Generated_Source\PSoC5/UART.c ****         #else /* UART_HD_ENABLED Full Duplex mode */
1487:.\Generated_Source\PSoC5/UART.c **** 
1488:.\Generated_Source\PSoC5/UART.c ****             static uint8 txPeriod;
1489:.\Generated_Source\PSoC5/UART.c **** 
1490:.\Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_SEND_BREAK) ||
 589              		.loc 1 1490 0
 590 0006 08B1     		cbz	r0, .L66
 591              		.loc 1 1490 0 is_stmt 0 discriminator 1
 592 0008 0328     		cmp	r0, #3
 593 000a 0DD1     		bne	.L67
 594              	.L66:
1491:.\Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1492:.\Generated_Source\PSoC5/UART.c ****             {
1493:.\Generated_Source\PSoC5/UART.c ****                 /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex mode
1494:.\Generated_Source\PSoC5/UART.c ****                 #if( (UART_PARITY_TYPE != UART__B_UART__NONE_REVB) || \
1495:.\Generated_Source\PSoC5/UART.c ****                                     (UART_PARITY_TYPE_SW != 0u) )
1496:.\Generated_Source\PSoC5/UART.c ****                     UART_WriteControlRegister(UART_ReadControlRegister() |
1497:.\Generated_Source\PSoC5/UART.c ****                                                           UART_CTRL_HD_SEND_BREAK);
1498:.\Generated_Source\PSoC5/UART.c ****                 #endif /* End UART_PARITY_TYPE != UART__B_UART__NONE_REVB  */
1499:.\Generated_Source\PSoC5/UART.c **** 
1500:.\Generated_Source\PSoC5/UART.c ****                 #if(UART_TXCLKGEN_DP)
1501:.\Generated_Source\PSoC5/UART.c ****                     txPeriod = UART_TXBITCLKTX_COMPLETE_REG;
 595              		.loc 1 1501 0 is_stmt 1
 596 000c 104B     		ldr	r3, .L71+4
 597 000e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 598 0010 0E4A     		ldr	r2, .L71
 599 0012 5170     		strb	r1, [r2, #1]
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 38


1502:.\Generated_Source\PSoC5/UART.c ****                     UART_TXBITCLKTX_COMPLETE_REG = UART_TXBITCTR_BREAKBITS;
 600              		.loc 1 1502 0
 601 0014 6722     		movs	r2, #103
 602 0016 1A70     		strb	r2, [r3]
1503:.\Generated_Source\PSoC5/UART.c ****                 #else
1504:.\Generated_Source\PSoC5/UART.c ****                     txPeriod = UART_TXBITCTR_PERIOD_REG;
1505:.\Generated_Source\PSoC5/UART.c ****                     UART_TXBITCTR_PERIOD_REG = UART_TXBITCTR_BREAKBITS8X;
1506:.\Generated_Source\PSoC5/UART.c ****                 #endif /* End UART_TXCLKGEN_DP */
1507:.\Generated_Source\PSoC5/UART.c **** 
1508:.\Generated_Source\PSoC5/UART.c ****                 /* Send zeros */
1509:.\Generated_Source\PSoC5/UART.c ****                 UART_TXDATA_REG = 0u;
 603              		.loc 1 1509 0
 604 0018 0022     		movs	r2, #0
 605 001a 1333     		adds	r3, r3, #19
 606 001c 1A70     		strb	r2, [r3]
 607              	.L68:
1510:.\Generated_Source\PSoC5/UART.c **** 
1511:.\Generated_Source\PSoC5/UART.c ****                 do /* Wait until transmit starts */
1512:.\Generated_Source\PSoC5/UART.c ****                 {
1513:.\Generated_Source\PSoC5/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
 608              		.loc 1 1513 0 discriminator 1
 609 001e 0D4B     		ldr	r3, .L71+8
 610 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 611              	.LVL42:
1514:.\Generated_Source\PSoC5/UART.c ****                 }
1515:.\Generated_Source\PSoC5/UART.c ****                 while((tmpStat & UART_TX_STS_FIFO_EMPTY) != 0u);
 612              		.loc 1 1515 0 discriminator 1
 613 0022 13F0020F 		tst	r3, #2
 614 0026 FAD1     		bne	.L68
 615              	.LVL43:
 616              	.L67:
1516:.\Generated_Source\PSoC5/UART.c ****             }
1517:.\Generated_Source\PSoC5/UART.c **** 
1518:.\Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
 617              		.loc 1 1518 0
 618 0028 0128     		cmp	r0, #1
 619 002a 01D0     		beq	.L69
 620              		.loc 1 1518 0 is_stmt 0 discriminator 1
 621 002c 0328     		cmp	r0, #3
 622 002e 04D1     		bne	.L70
 623              	.L69:
1519:.\Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1520:.\Generated_Source\PSoC5/UART.c ****             {
1521:.\Generated_Source\PSoC5/UART.c ****                 do /* Wait until transmit complete */
1522:.\Generated_Source\PSoC5/UART.c ****                 {
1523:.\Generated_Source\PSoC5/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
 624              		.loc 1 1523 0 is_stmt 1 discriminator 1
 625 0030 084B     		ldr	r3, .L71+8
 626 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 627              	.LVL44:
1524:.\Generated_Source\PSoC5/UART.c ****                 }
1525:.\Generated_Source\PSoC5/UART.c ****                 while(((uint8)~tmpStat & UART_TX_STS_COMPLETE) != 0u);
 628              		.loc 1 1525 0 discriminator 1
 629 0034 13F0010F 		tst	r3, #1
 630 0038 FAD0     		beq	.L69
 631              	.LVL45:
 632              	.L70:
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 39


1526:.\Generated_Source\PSoC5/UART.c ****             }
1527:.\Generated_Source\PSoC5/UART.c **** 
1528:.\Generated_Source\PSoC5/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
1529:.\Generated_Source\PSoC5/UART.c ****                 (retMode == UART_REINIT) ||
 633              		.loc 1 1529 0
 634 003a 0138     		subs	r0, r0, #1
 635              	.LVL46:
 636 003c C0B2     		uxtb	r0, r0
1528:.\Generated_Source\PSoC5/UART.c ****                 (retMode == UART_REINIT) ||
 637              		.loc 1 1528 0
 638 003e 0228     		cmp	r0, #2
 639 0040 03D8     		bhi	.L64
1530:.\Generated_Source\PSoC5/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1531:.\Generated_Source\PSoC5/UART.c ****             {
1532:.\Generated_Source\PSoC5/UART.c **** 
1533:.\Generated_Source\PSoC5/UART.c ****             #if(UART_TXCLKGEN_DP)
1534:.\Generated_Source\PSoC5/UART.c ****                 UART_TXBITCLKTX_COMPLETE_REG = txPeriod;
 640              		.loc 1 1534 0
 641 0042 024B     		ldr	r3, .L71
 642 0044 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 643 0046 024B     		ldr	r3, .L71+4
 644 0048 1A70     		strb	r2, [r3]
 645              	.L64:
 646 004a 7047     		bx	lr
 647              	.L72:
 648              		.align	2
 649              	.L71:
 650 004c 00000000 		.word	.LANCHOR0
 651 0050 30640040 		.word	1073767472
 652 0054 64640040 		.word	1073767524
 653              	.LBE2:
 654              		.cfi_endproc
 655              	.LFE15:
 656              		.size	UART_SendBreak, .-UART_SendBreak
 657              		.section	.text.UART_SetTxAddressMode,"ax",%progbits
 658              		.align	2
 659              		.global	UART_SetTxAddressMode
 660              		.thumb
 661              		.thumb_func
 662              		.type	UART_SetTxAddressMode, %function
 663              	UART_SetTxAddressMode:
 664              	.LFB16:
1535:.\Generated_Source\PSoC5/UART.c ****             #else
1536:.\Generated_Source\PSoC5/UART.c ****                 UART_TXBITCTR_PERIOD_REG = txPeriod;
1537:.\Generated_Source\PSoC5/UART.c ****             #endif /* End UART_TXCLKGEN_DP */
1538:.\Generated_Source\PSoC5/UART.c **** 
1539:.\Generated_Source\PSoC5/UART.c ****             #if( (UART_PARITY_TYPE != UART__B_UART__NONE_REVB) || \
1540:.\Generated_Source\PSoC5/UART.c ****                  (UART_PARITY_TYPE_SW != 0u) )
1541:.\Generated_Source\PSoC5/UART.c ****                 UART_WriteControlRegister(UART_ReadControlRegister() &
1542:.\Generated_Source\PSoC5/UART.c ****                                                       (uint8) ~UART_CTRL_HD_SEND_BREAK);
1543:.\Generated_Source\PSoC5/UART.c ****             #endif /* End UART_PARITY_TYPE != NONE */
1544:.\Generated_Source\PSoC5/UART.c ****             }
1545:.\Generated_Source\PSoC5/UART.c ****         #endif    /* End UART_HD_ENABLED */
1546:.\Generated_Source\PSoC5/UART.c ****         }
1547:.\Generated_Source\PSoC5/UART.c ****     }
1548:.\Generated_Source\PSoC5/UART.c **** 
1549:.\Generated_Source\PSoC5/UART.c **** 
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 40


1550:.\Generated_Source\PSoC5/UART.c ****     /*******************************************************************************
1551:.\Generated_Source\PSoC5/UART.c ****     * Function Name: UART_SetTxAddressMode
1552:.\Generated_Source\PSoC5/UART.c ****     ********************************************************************************
1553:.\Generated_Source\PSoC5/UART.c ****     *
1554:.\Generated_Source\PSoC5/UART.c ****     * Summary:
1555:.\Generated_Source\PSoC5/UART.c ****     *  Configures the transmitter to signal the next bytes is address or data.
1556:.\Generated_Source\PSoC5/UART.c ****     *
1557:.\Generated_Source\PSoC5/UART.c ****     * Parameters:
1558:.\Generated_Source\PSoC5/UART.c ****     *  addressMode: 
1559:.\Generated_Source\PSoC5/UART.c ****     *       UART_SET_SPACE - Configure the transmitter to send the next
1560:.\Generated_Source\PSoC5/UART.c ****     *                                    byte as a data.
1561:.\Generated_Source\PSoC5/UART.c ****     *       UART_SET_MARK  - Configure the transmitter to send the next
1562:.\Generated_Source\PSoC5/UART.c ****     *                                    byte as an address.
1563:.\Generated_Source\PSoC5/UART.c ****     *
1564:.\Generated_Source\PSoC5/UART.c ****     * Return:
1565:.\Generated_Source\PSoC5/UART.c ****     *  None.
1566:.\Generated_Source\PSoC5/UART.c ****     *
1567:.\Generated_Source\PSoC5/UART.c ****     * Side Effects:
1568:.\Generated_Source\PSoC5/UART.c ****     *  This function sets and clears UART_CTRL_MARK bit in the Control
1569:.\Generated_Source\PSoC5/UART.c ****     *  register.
1570:.\Generated_Source\PSoC5/UART.c ****     *
1571:.\Generated_Source\PSoC5/UART.c ****     *******************************************************************************/
1572:.\Generated_Source\PSoC5/UART.c ****     void UART_SetTxAddressMode(uint8 addressMode) 
1573:.\Generated_Source\PSoC5/UART.c ****     {
 665              		.loc 1 1573 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 670              	.LVL47:
 671 0000 7047     		bx	lr
 672              		.cfi_endproc
 673              	.LFE16:
 674              		.size	UART_SetTxAddressMode, .-UART_SetTxAddressMode
 675              		.global	UART_initVar
 676 0002 00BF     		.bss
 677              		.set	.LANCHOR0,. + 0
 678              		.type	UART_initVar, %object
 679              		.size	UART_initVar, 1
 680              	UART_initVar:
 681 0000 00       		.space	1
 682              		.type	txPeriod.4889, %object
 683              		.size	txPeriod.4889, 1
 684              	txPeriod.4889:
 685 0001 00       		.space	1
 686              		.text
 687              	.Letext0:
 688              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 689              		.file 3 ".\\Generated_Source\\PSoC5\\UART_IntClock.h"
 690              		.file 4 ".\\Generated_Source\\PSoC5\\CyLib.h"
 691              		.section	.debug_info,"",%progbits
 692              	.Ldebug_info0:
 693 0000 4B040000 		.4byte	0x44b
 694 0004 0400     		.2byte	0x4
 695 0006 00000000 		.4byte	.Ldebug_abbrev0
 696 000a 04       		.byte	0x4
 697 000b 01       		.uleb128 0x1
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 41


 698 000c C2010000 		.4byte	.LASF46
 699 0010 01       		.byte	0x1
 700 0011 3C010000 		.4byte	.LASF47
 701 0015 CD000000 		.4byte	.LASF48
 702 0019 00000000 		.4byte	.Ldebug_ranges0+0
 703 001d 00000000 		.4byte	0
 704 0021 00000000 		.4byte	.Ldebug_line0
 705 0025 02       		.uleb128 0x2
 706 0026 01       		.byte	0x1
 707 0027 06       		.byte	0x6
 708 0028 8F030000 		.4byte	.LASF0
 709 002c 02       		.uleb128 0x2
 710 002d 01       		.byte	0x1
 711 002e 08       		.byte	0x8
 712 002f 90010000 		.4byte	.LASF1
 713 0033 02       		.uleb128 0x2
 714 0034 02       		.byte	0x2
 715 0035 05       		.byte	0x5
 716 0036 4F030000 		.4byte	.LASF2
 717 003a 02       		.uleb128 0x2
 718 003b 02       		.byte	0x2
 719 003c 07       		.byte	0x7
 720 003d 50000000 		.4byte	.LASF3
 721 0041 02       		.uleb128 0x2
 722 0042 04       		.byte	0x4
 723 0043 05       		.byte	0x5
 724 0044 7A030000 		.4byte	.LASF4
 725 0048 02       		.uleb128 0x2
 726 0049 04       		.byte	0x4
 727 004a 07       		.byte	0x7
 728 004b 2A010000 		.4byte	.LASF5
 729 004f 02       		.uleb128 0x2
 730 0050 08       		.byte	0x8
 731 0051 05       		.byte	0x5
 732 0052 00000000 		.4byte	.LASF6
 733 0056 02       		.uleb128 0x2
 734 0057 08       		.byte	0x8
 735 0058 07       		.byte	0x7
 736 0059 9B000000 		.4byte	.LASF7
 737 005d 03       		.uleb128 0x3
 738 005e 04       		.byte	0x4
 739 005f 05       		.byte	0x5
 740 0060 696E7400 		.ascii	"int\000"
 741 0064 02       		.uleb128 0x2
 742 0065 04       		.byte	0x4
 743 0066 07       		.byte	0x7
 744 0067 67020000 		.4byte	.LASF8
 745 006b 04       		.uleb128 0x4
 746 006c 6C030000 		.4byte	.LASF9
 747 0070 02       		.byte	0x2
 748 0071 5B       		.byte	0x5b
 749 0072 2C000000 		.4byte	0x2c
 750 0076 04       		.uleb128 0x4
 751 0077 AC010000 		.4byte	.LASF10
 752 007b 02       		.byte	0x2
 753 007c 5C       		.byte	0x5c
 754 007d 3A000000 		.4byte	0x3a
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 42


 755 0081 02       		.uleb128 0x2
 756 0082 04       		.byte	0x4
 757 0083 04       		.byte	0x4
 758 0084 95000000 		.4byte	.LASF11
 759 0088 02       		.uleb128 0x2
 760 0089 08       		.byte	0x8
 761 008a 04       		.byte	0x4
 762 008b 9E010000 		.4byte	.LASF12
 763 008f 04       		.uleb128 0x4
 764 0090 17000000 		.4byte	.LASF13
 765 0094 02       		.byte	0x2
 766 0095 6C       		.byte	0x6c
 767 0096 9A000000 		.4byte	0x9a
 768 009a 02       		.uleb128 0x2
 769 009b 01       		.byte	0x1
 770 009c 08       		.byte	0x8
 771 009d 31030000 		.4byte	.LASF14
 772 00a1 04       		.uleb128 0x4
 773 00a2 C8000000 		.4byte	.LASF15
 774 00a6 02       		.byte	0x2
 775 00a7 F0       		.byte	0xf0
 776 00a8 AC000000 		.4byte	0xac
 777 00ac 05       		.uleb128 0x5
 778 00ad 6B000000 		.4byte	0x6b
 779 00b1 02       		.uleb128 0x2
 780 00b2 04       		.byte	0x4
 781 00b3 07       		.byte	0x7
 782 00b4 1D030000 		.4byte	.LASF16
 783 00b8 06       		.uleb128 0x6
 784 00b9 BE000000 		.4byte	.LASF49
 785 00bd 01       		.byte	0x1
 786 00be 6A       		.byte	0x6a
 787 00bf 00000000 		.4byte	.LFB1
 788 00c3 18000000 		.4byte	.LFE1-.LFB1
 789 00c7 01       		.uleb128 0x1
 790 00c8 9C       		.byte	0x9c
 791 00c9 07       		.uleb128 0x7
 792 00ca 83030000 		.4byte	.LASF17
 793 00ce 01       		.byte	0x1
 794 00cf B7       		.byte	0xb7
 795 00d0 00000000 		.4byte	.LFB2
 796 00d4 24000000 		.4byte	.LFE2-.LFB2
 797 00d8 01       		.uleb128 0x1
 798 00d9 9C       		.byte	0x9c
 799 00da 10010000 		.4byte	0x110
 800 00de 08       		.uleb128 0x8
 801 00df 7F010000 		.4byte	.LASF20
 802 00e3 01       		.byte	0x1
 803 00e4 B9       		.byte	0xb9
 804 00e5 6B000000 		.4byte	0x6b
 805 00e9 00000000 		.4byte	.LLST0
 806 00ed 09       		.uleb128 0x9
 807 00ee 06000000 		.4byte	.LVL0
 808 00f2 24040000 		.4byte	0x424
 809 00f6 09       		.uleb128 0x9
 810 00f7 16000000 		.4byte	.LVL2
 811 00fb 2F040000 		.4byte	0x42f
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 43


 812 00ff 0A       		.uleb128 0xa
 813 0100 1C000000 		.4byte	.LVL3
 814 0104 36040000 		.4byte	0x436
 815 0108 0B       		.uleb128 0xb
 816 0109 01       		.uleb128 0x1
 817 010a 50       		.byte	0x50
 818 010b 02       		.uleb128 0x2
 819 010c 74       		.byte	0x74
 820 010d 00       		.sleb128 0
 821 010e 00       		.byte	0
 822 010f 00       		.byte	0
 823 0110 07       		.uleb128 0x7
 824 0111 5C010000 		.4byte	.LASF18
 825 0115 01       		.byte	0x1
 826 0116 4C       		.byte	0x4c
 827 0117 00000000 		.4byte	.LFB0
 828 011b 1C000000 		.4byte	.LFE0-.LFB0
 829 011f 01       		.uleb128 0x1
 830 0120 9C       		.byte	0x9c
 831 0121 38010000 		.4byte	0x138
 832 0125 09       		.uleb128 0x9
 833 0126 0C000000 		.4byte	.LVL5
 834 012a B8000000 		.4byte	0xb8
 835 012e 09       		.uleb128 0x9
 836 012f 16000000 		.4byte	.LVL6
 837 0133 C9000000 		.4byte	0xc9
 838 0137 00       		.byte	0
 839 0138 07       		.uleb128 0x7
 840 0139 63000000 		.4byte	.LASF19
 841 013d 01       		.byte	0x1
 842 013e F0       		.byte	0xf0
 843 013f 00000000 		.4byte	.LFB3
 844 0143 24000000 		.4byte	.LFE3-.LFB3
 845 0147 01       		.uleb128 0x1
 846 0148 9C       		.byte	0x9c
 847 0149 7F010000 		.4byte	0x17f
 848 014d 08       		.uleb128 0x8
 849 014e 7F010000 		.4byte	.LASF20
 850 0152 01       		.byte	0x1
 851 0153 F2       		.byte	0xf2
 852 0154 6B000000 		.4byte	0x6b
 853 0158 13000000 		.4byte	.LLST1
 854 015c 09       		.uleb128 0x9
 855 015d 06000000 		.4byte	.LVL7
 856 0161 24040000 		.4byte	0x424
 857 0165 09       		.uleb128 0x9
 858 0166 0C000000 		.4byte	.LVL9
 859 016a 47040000 		.4byte	0x447
 860 016e 0A       		.uleb128 0xa
 861 016f 1C000000 		.4byte	.LVL10
 862 0173 36040000 		.4byte	0x436
 863 0177 0B       		.uleb128 0xb
 864 0178 01       		.uleb128 0x1
 865 0179 50       		.byte	0x50
 866 017a 02       		.uleb128 0x2
 867 017b 74       		.byte	0x74
 868 017c 00       		.sleb128 0
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 44


 869 017d 00       		.byte	0
 870 017e 00       		.byte	0
 871 017f 0C       		.uleb128 0xc
 872 0180 B6020000 		.4byte	.LASF27
 873 0184 01       		.byte	0x1
 874 0185 2701     		.2byte	0x127
 875 0187 6B000000 		.4byte	0x6b
 876 018b 00000000 		.4byte	.LFB4
 877 018f 04000000 		.4byte	.LFE4-.LFB4
 878 0193 01       		.uleb128 0x1
 879 0194 9C       		.byte	0x9c
 880 0195 0D       		.uleb128 0xd
 881 0196 74020000 		.4byte	.LASF21
 882 019a 01       		.byte	0x1
 883 019b 3F01     		.2byte	0x13f
 884 019d 00000000 		.4byte	.LFB5
 885 01a1 02000000 		.4byte	.LFE5-.LFB5
 886 01a5 01       		.uleb128 0x1
 887 01a6 9C       		.byte	0x9c
 888 01a7 BA010000 		.4byte	0x1ba
 889 01ab 0E       		.uleb128 0xe
 890 01ac 72030000 		.4byte	.LASF23
 891 01b0 01       		.byte	0x1
 892 01b1 3F01     		.2byte	0x13f
 893 01b3 6B000000 		.4byte	0x6b
 894 01b7 01       		.uleb128 0x1
 895 01b8 50       		.byte	0x50
 896 01b9 00       		.byte	0
 897 01ba 0D       		.uleb128 0xd
 898 01bb E5020000 		.4byte	.LASF22
 899 01bf 01       		.byte	0x1
 900 01c0 8C03     		.2byte	0x38c
 901 01c2 00000000 		.4byte	.LFB6
 902 01c6 0C000000 		.4byte	.LFE6-.LFB6
 903 01ca 01       		.uleb128 0x1
 904 01cb 9C       		.byte	0x9c
 905 01cc DF010000 		.4byte	0x1df
 906 01d0 0E       		.uleb128 0xe
 907 01d1 A5010000 		.4byte	.LASF24
 908 01d5 01       		.byte	0x1
 909 01d6 8C03     		.2byte	0x38c
 910 01d8 6B000000 		.4byte	0x6b
 911 01dc 01       		.uleb128 0x1
 912 01dd 50       		.byte	0x50
 913 01de 00       		.byte	0
 914 01df 0D       		.uleb128 0xd
 915 01e0 36030000 		.4byte	.LASF25
 916 01e4 01       		.byte	0x1
 917 01e5 AE03     		.2byte	0x3ae
 918 01e7 00000000 		.4byte	.LFB7
 919 01eb 14000000 		.4byte	.LFE7-.LFB7
 920 01ef 01       		.uleb128 0x1
 921 01f0 9C       		.byte	0x9c
 922 01f1 04020000 		.4byte	0x204
 923 01f5 0E       		.uleb128 0xe
 924 01f6 26030000 		.4byte	.LASF26
 925 01fa 01       		.byte	0x1
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 45


 926 01fb AE03     		.2byte	0x3ae
 927 01fd 6B000000 		.4byte	0x6b
 928 0201 01       		.uleb128 0x1
 929 0202 50       		.byte	0x50
 930 0203 00       		.byte	0
 931 0204 0C       		.uleb128 0xc
 932 0205 8E020000 		.4byte	.LASF28
 933 0209 01       		.byte	0x1
 934 020a EB03     		.2byte	0x3eb
 935 020c 6B000000 		.4byte	0x6b
 936 0210 00000000 		.4byte	.LFB8
 937 0214 0C000000 		.4byte	.LFE8-.LFB8
 938 0218 01       		.uleb128 0x1
 939 0219 9C       		.byte	0x9c
 940 021a 0D       		.uleb128 0xd
 941 021b FD020000 		.4byte	.LASF29
 942 021f 01       		.byte	0x1
 943 0220 1104     		.2byte	0x411
 944 0222 00000000 		.4byte	.LFB9
 945 0226 18000000 		.4byte	.LFE9-.LFB9
 946 022a 01       		.uleb128 0x1
 947 022b 9C       		.byte	0x9c
 948 022c 3F020000 		.4byte	0x23f
 949 0230 0E       		.uleb128 0xe
 950 0231 26030000 		.4byte	.LASF26
 951 0235 01       		.byte	0x1
 952 0236 1104     		.2byte	0x411
 953 0238 6B000000 		.4byte	0x6b
 954 023c 01       		.uleb128 0x1
 955 023d 50       		.byte	0x50
 956 023e 00       		.byte	0
 957 023f 0D       		.uleb128 0xd
 958 0240 9B030000 		.4byte	.LASF30
 959 0244 01       		.byte	0x1
 960 0245 7904     		.2byte	0x479
 961 0247 00000000 		.4byte	.LFB10
 962 024b 24000000 		.4byte	.LFE10-.LFB10
 963 024f 01       		.uleb128 0x1
 964 0250 9C       		.byte	0x9c
 965 0251 7F020000 		.4byte	0x27f
 966 0255 0F       		.uleb128 0xf
 967 0256 7A000000 		.4byte	.LASF31
 968 025a 01       		.byte	0x1
 969 025b 7904     		.2byte	0x479
 970 025d 7F020000 		.4byte	0x27f
 971 0261 26000000 		.4byte	.LLST2
 972 0265 10       		.uleb128 0x10
 973 0266 DC020000 		.4byte	.LASF32
 974 026a 01       		.byte	0x1
 975 026b 7B04     		.2byte	0x47b
 976 026d 76000000 		.4byte	0x76
 977 0271 68000000 		.4byte	.LLST3
 978 0275 09       		.uleb128 0x9
 979 0276 0E000000 		.4byte	.LVL19
 980 027a 1A020000 		.4byte	0x21a
 981 027e 00       		.byte	0
 982 027f 11       		.uleb128 0x11
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 46


 983 0280 04       		.byte	0x4
 984 0281 85020000 		.4byte	0x285
 985 0285 12       		.uleb128 0x12
 986 0286 8F000000 		.4byte	0x8f
 987 028a 0D       		.uleb128 0xd
 988 028b 67010000 		.4byte	.LASF33
 989 028f 01       		.byte	0x1
 990 0290 A704     		.2byte	0x4a7
 991 0292 00000000 		.4byte	.LFB11
 992 0296 28000000 		.4byte	.LFE11-.LFB11
 993 029a 01       		.uleb128 0x1
 994 029b 9C       		.byte	0x9c
 995 029c DA020000 		.4byte	0x2da
 996 02a0 0F       		.uleb128 0xf
 997 02a1 7A000000 		.4byte	.LASF31
 998 02a5 01       		.byte	0x1
 999 02a6 A704     		.2byte	0x4a7
 1000 02a8 DA020000 		.4byte	0x2da
 1001 02ac A9000000 		.4byte	.LLST4
 1002 02b0 0F       		.uleb128 0xf
 1003 02b1 75010000 		.4byte	.LASF34
 1004 02b5 01       		.byte	0x1
 1005 02b6 A704     		.2byte	0x4a7
 1006 02b8 6B000000 		.4byte	0x6b
 1007 02bc EB000000 		.4byte	.LLST5
 1008 02c0 10       		.uleb128 0x10
 1009 02c1 DC020000 		.4byte	.LASF32
 1010 02c5 01       		.byte	0x1
 1011 02c6 AA04     		.2byte	0x4aa
 1012 02c8 6B000000 		.4byte	0x6b
 1013 02cc 25010000 		.4byte	.LLST6
 1014 02d0 09       		.uleb128 0x9
 1015 02d1 0E000000 		.4byte	.LVL27
 1016 02d5 1A020000 		.4byte	0x21a
 1017 02d9 00       		.byte	0
 1018 02da 11       		.uleb128 0x11
 1019 02db 04       		.byte	0x4
 1020 02dc E0020000 		.4byte	0x2e0
 1021 02e0 12       		.uleb128 0x12
 1022 02e1 6B000000 		.4byte	0x6b
 1023 02e5 0D       		.uleb128 0xd
 1024 02e6 CF020000 		.4byte	.LASF35
 1025 02ea 01       		.byte	0x1
 1026 02eb CE04     		.2byte	0x4ce
 1027 02ed 00000000 		.4byte	.LFB12
 1028 02f1 20000000 		.4byte	.LFE12-.LFB12
 1029 02f5 01       		.uleb128 0x1
 1030 02f6 9C       		.byte	0x9c
 1031 02f7 37030000 		.4byte	0x337
 1032 02fb 0F       		.uleb128 0xf
 1033 02fc 26030000 		.4byte	.LASF26
 1034 0300 01       		.byte	0x1
 1035 0301 CE04     		.2byte	0x4ce
 1036 0303 6B000000 		.4byte	0x6b
 1037 0307 66010000 		.4byte	.LLST7
 1038 030b 09       		.uleb128 0x9
 1039 030c 0C000000 		.4byte	.LVL34
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 47


 1040 0310 1A020000 		.4byte	0x21a
 1041 0314 13       		.uleb128 0x13
 1042 0315 12000000 		.4byte	.LVL35
 1043 0319 1A020000 		.4byte	0x21a
 1044 031d 27030000 		.4byte	0x327
 1045 0321 0B       		.uleb128 0xb
 1046 0322 01       		.uleb128 0x1
 1047 0323 50       		.byte	0x50
 1048 0324 01       		.uleb128 0x1
 1049 0325 3D       		.byte	0x3d
 1050 0326 00       		.byte	0
 1051 0327 0A       		.uleb128 0xa
 1052 0328 18000000 		.4byte	.LVL36
 1053 032c 1A020000 		.4byte	0x21a
 1054 0330 0B       		.uleb128 0xb
 1055 0331 01       		.uleb128 0x1
 1056 0332 50       		.byte	0x50
 1057 0333 01       		.uleb128 0x1
 1058 0334 3A       		.byte	0x3a
 1059 0335 00       		.byte	0
 1060 0336 00       		.byte	0
 1061 0337 14       		.uleb128 0x14
 1062 0338 1D000000 		.4byte	.LASF50
 1063 033c 01       		.byte	0x1
 1064 033d F904     		.2byte	0x4f9
 1065 033f 6B000000 		.4byte	0x6b
 1066 0343 00000000 		.4byte	.LFB13
 1067 0347 24000000 		.4byte	.LFE13-.LFB13
 1068 034b 01       		.uleb128 0x1
 1069 034c 9C       		.byte	0x9c
 1070 034d 62030000 		.4byte	0x362
 1071 0351 10       		.uleb128 0x10
 1072 0352 AA030000 		.4byte	.LASF36
 1073 0356 01       		.byte	0x1
 1074 0357 FC04     		.2byte	0x4fc
 1075 0359 6B000000 		.4byte	0x6b
 1076 035d 87010000 		.4byte	.LLST8
 1077 0361 00       		.byte	0
 1078 0362 0D       		.uleb128 0xd
 1079 0363 59030000 		.4byte	.LASF37
 1080 0367 01       		.byte	0x1
 1081 0368 4A05     		.2byte	0x54a
 1082 036a 00000000 		.4byte	.LFB14
 1083 036e 24000000 		.4byte	.LFE14-.LFB14
 1084 0372 01       		.uleb128 0x1
 1085 0373 9C       		.byte	0x9c
 1086 0374 9B030000 		.4byte	0x39b
 1087 0378 10       		.uleb128 0x10
 1088 0379 7F010000 		.4byte	.LASF20
 1089 037d 01       		.byte	0x1
 1090 037e 4C05     		.2byte	0x54c
 1091 0380 6B000000 		.4byte	0x6b
 1092 0384 A5010000 		.4byte	.LLST9
 1093 0388 09       		.uleb128 0x9
 1094 0389 06000000 		.4byte	.LVL39
 1095 038d 24040000 		.4byte	0x424
 1096 0391 09       		.uleb128 0x9
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 48


 1097 0392 1C000000 		.4byte	.LVL40
 1098 0396 36040000 		.4byte	0x436
 1099 039a 00       		.byte	0
 1100 039b 0D       		.uleb128 0xd
 1101 039c B3010000 		.4byte	.LASF38
 1102 03a0 01       		.byte	0x1
 1103 03a1 A005     		.2byte	0x5a0
 1104 03a3 00000000 		.4byte	.LFB15
 1105 03a7 58000000 		.4byte	.LFE15-.LFB15
 1106 03ab 01       		.uleb128 0x1
 1107 03ac 9C       		.byte	0x9c
 1108 03ad EE030000 		.4byte	0x3ee
 1109 03b1 0F       		.uleb128 0xf
 1110 03b2 47030000 		.4byte	.LASF39
 1111 03b6 01       		.byte	0x1
 1112 03b7 A005     		.2byte	0x5a0
 1113 03b9 6B000000 		.4byte	0x6b
 1114 03bd B8010000 		.4byte	.LLST10
 1115 03c1 15       		.uleb128 0x15
 1116 03c2 06000000 		.4byte	.LBB2
 1117 03c6 52000000 		.4byte	.LBE2-.LBB2
 1118 03ca 10       		.uleb128 0x10
 1119 03cb 32000000 		.4byte	.LASF40
 1120 03cf 01       		.byte	0x1
 1121 03d0 A805     		.2byte	0x5a8
 1122 03d2 6B000000 		.4byte	0x6b
 1123 03d6 D9010000 		.4byte	.LLST11
 1124 03da 16       		.uleb128 0x16
 1125 03db 0E000000 		.4byte	.LASF41
 1126 03df 01       		.byte	0x1
 1127 03e0 D005     		.2byte	0x5d0
 1128 03e2 6B000000 		.4byte	0x6b
 1129 03e6 05       		.uleb128 0x5
 1130 03e7 03       		.byte	0x3
 1131 03e8 01000000 		.4byte	txPeriod.4889
 1132 03ec 00       		.byte	0
 1133 03ed 00       		.byte	0
 1134 03ee 0D       		.uleb128 0xd
 1135 03ef 3A000000 		.4byte	.LASF42
 1136 03f3 01       		.byte	0x1
 1137 03f4 2406     		.2byte	0x624
 1138 03f6 00000000 		.4byte	.LFB16
 1139 03fa 02000000 		.4byte	.LFE16-.LFB16
 1140 03fe 01       		.uleb128 0x1
 1141 03ff 9C       		.byte	0x9c
 1142 0400 13040000 		.4byte	0x413
 1143 0404 0E       		.uleb128 0xe
 1144 0405 B2000000 		.4byte	.LASF43
 1145 0409 01       		.byte	0x1
 1146 040a 2406     		.2byte	0x624
 1147 040c 6B000000 		.4byte	0x6b
 1148 0410 01       		.uleb128 0x1
 1149 0411 50       		.byte	0x50
 1150 0412 00       		.byte	0
 1151 0413 17       		.uleb128 0x17
 1152 0414 6D000000 		.4byte	.LASF51
 1153 0418 01       		.byte	0x1
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 49


 1154 0419 1B       		.byte	0x1b
 1155 041a 6B000000 		.4byte	0x6b
 1156 041e 05       		.uleb128 0x5
 1157 041f 03       		.byte	0x3
 1158 0420 00000000 		.4byte	UART_initVar
 1159 0424 18       		.uleb128 0x18
 1160 0425 50020000 		.4byte	.LASF52
 1161 0429 04       		.byte	0x4
 1162 042a 7E       		.byte	0x7e
 1163 042b 6B000000 		.4byte	0x6b
 1164 042f 19       		.uleb128 0x19
 1165 0430 81000000 		.4byte	.LASF44
 1166 0434 03       		.byte	0x3
 1167 0435 27       		.byte	0x27
 1168 0436 1A       		.uleb128 0x1a
 1169 0437 A0020000 		.4byte	.LASF53
 1170 043b 04       		.byte	0x4
 1171 043c 7F       		.byte	0x7f
 1172 043d 47040000 		.4byte	0x447
 1173 0441 1B       		.uleb128 0x1b
 1174 0442 6B000000 		.4byte	0x6b
 1175 0446 00       		.byte	0
 1176 0447 19       		.uleb128 0x19
 1177 0448 0A030000 		.4byte	.LASF45
 1178 044c 03       		.byte	0x3
 1179 044d 28       		.byte	0x28
 1180 044e 00       		.byte	0
 1181              		.section	.debug_abbrev,"",%progbits
 1182              	.Ldebug_abbrev0:
 1183 0000 01       		.uleb128 0x1
 1184 0001 11       		.uleb128 0x11
 1185 0002 01       		.byte	0x1
 1186 0003 25       		.uleb128 0x25
 1187 0004 0E       		.uleb128 0xe
 1188 0005 13       		.uleb128 0x13
 1189 0006 0B       		.uleb128 0xb
 1190 0007 03       		.uleb128 0x3
 1191 0008 0E       		.uleb128 0xe
 1192 0009 1B       		.uleb128 0x1b
 1193 000a 0E       		.uleb128 0xe
 1194 000b 55       		.uleb128 0x55
 1195 000c 17       		.uleb128 0x17
 1196 000d 11       		.uleb128 0x11
 1197 000e 01       		.uleb128 0x1
 1198 000f 10       		.uleb128 0x10
 1199 0010 17       		.uleb128 0x17
 1200 0011 00       		.byte	0
 1201 0012 00       		.byte	0
 1202 0013 02       		.uleb128 0x2
 1203 0014 24       		.uleb128 0x24
 1204 0015 00       		.byte	0
 1205 0016 0B       		.uleb128 0xb
 1206 0017 0B       		.uleb128 0xb
 1207 0018 3E       		.uleb128 0x3e
 1208 0019 0B       		.uleb128 0xb
 1209 001a 03       		.uleb128 0x3
 1210 001b 0E       		.uleb128 0xe
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 50


 1211 001c 00       		.byte	0
 1212 001d 00       		.byte	0
 1213 001e 03       		.uleb128 0x3
 1214 001f 24       		.uleb128 0x24
 1215 0020 00       		.byte	0
 1216 0021 0B       		.uleb128 0xb
 1217 0022 0B       		.uleb128 0xb
 1218 0023 3E       		.uleb128 0x3e
 1219 0024 0B       		.uleb128 0xb
 1220 0025 03       		.uleb128 0x3
 1221 0026 08       		.uleb128 0x8
 1222 0027 00       		.byte	0
 1223 0028 00       		.byte	0
 1224 0029 04       		.uleb128 0x4
 1225 002a 16       		.uleb128 0x16
 1226 002b 00       		.byte	0
 1227 002c 03       		.uleb128 0x3
 1228 002d 0E       		.uleb128 0xe
 1229 002e 3A       		.uleb128 0x3a
 1230 002f 0B       		.uleb128 0xb
 1231 0030 3B       		.uleb128 0x3b
 1232 0031 0B       		.uleb128 0xb
 1233 0032 49       		.uleb128 0x49
 1234 0033 13       		.uleb128 0x13
 1235 0034 00       		.byte	0
 1236 0035 00       		.byte	0
 1237 0036 05       		.uleb128 0x5
 1238 0037 35       		.uleb128 0x35
 1239 0038 00       		.byte	0
 1240 0039 49       		.uleb128 0x49
 1241 003a 13       		.uleb128 0x13
 1242 003b 00       		.byte	0
 1243 003c 00       		.byte	0
 1244 003d 06       		.uleb128 0x6
 1245 003e 2E       		.uleb128 0x2e
 1246 003f 00       		.byte	0
 1247 0040 3F       		.uleb128 0x3f
 1248 0041 19       		.uleb128 0x19
 1249 0042 03       		.uleb128 0x3
 1250 0043 0E       		.uleb128 0xe
 1251 0044 3A       		.uleb128 0x3a
 1252 0045 0B       		.uleb128 0xb
 1253 0046 3B       		.uleb128 0x3b
 1254 0047 0B       		.uleb128 0xb
 1255 0048 27       		.uleb128 0x27
 1256 0049 19       		.uleb128 0x19
 1257 004a 11       		.uleb128 0x11
 1258 004b 01       		.uleb128 0x1
 1259 004c 12       		.uleb128 0x12
 1260 004d 06       		.uleb128 0x6
 1261 004e 40       		.uleb128 0x40
 1262 004f 18       		.uleb128 0x18
 1263 0050 9742     		.uleb128 0x2117
 1264 0052 19       		.uleb128 0x19
 1265 0053 00       		.byte	0
 1266 0054 00       		.byte	0
 1267 0055 07       		.uleb128 0x7
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 51


 1268 0056 2E       		.uleb128 0x2e
 1269 0057 01       		.byte	0x1
 1270 0058 3F       		.uleb128 0x3f
 1271 0059 19       		.uleb128 0x19
 1272 005a 03       		.uleb128 0x3
 1273 005b 0E       		.uleb128 0xe
 1274 005c 3A       		.uleb128 0x3a
 1275 005d 0B       		.uleb128 0xb
 1276 005e 3B       		.uleb128 0x3b
 1277 005f 0B       		.uleb128 0xb
 1278 0060 27       		.uleb128 0x27
 1279 0061 19       		.uleb128 0x19
 1280 0062 11       		.uleb128 0x11
 1281 0063 01       		.uleb128 0x1
 1282 0064 12       		.uleb128 0x12
 1283 0065 06       		.uleb128 0x6
 1284 0066 40       		.uleb128 0x40
 1285 0067 18       		.uleb128 0x18
 1286 0068 9742     		.uleb128 0x2117
 1287 006a 19       		.uleb128 0x19
 1288 006b 01       		.uleb128 0x1
 1289 006c 13       		.uleb128 0x13
 1290 006d 00       		.byte	0
 1291 006e 00       		.byte	0
 1292 006f 08       		.uleb128 0x8
 1293 0070 34       		.uleb128 0x34
 1294 0071 00       		.byte	0
 1295 0072 03       		.uleb128 0x3
 1296 0073 0E       		.uleb128 0xe
 1297 0074 3A       		.uleb128 0x3a
 1298 0075 0B       		.uleb128 0xb
 1299 0076 3B       		.uleb128 0x3b
 1300 0077 0B       		.uleb128 0xb
 1301 0078 49       		.uleb128 0x49
 1302 0079 13       		.uleb128 0x13
 1303 007a 02       		.uleb128 0x2
 1304 007b 17       		.uleb128 0x17
 1305 007c 00       		.byte	0
 1306 007d 00       		.byte	0
 1307 007e 09       		.uleb128 0x9
 1308 007f 898201   		.uleb128 0x4109
 1309 0082 00       		.byte	0
 1310 0083 11       		.uleb128 0x11
 1311 0084 01       		.uleb128 0x1
 1312 0085 31       		.uleb128 0x31
 1313 0086 13       		.uleb128 0x13
 1314 0087 00       		.byte	0
 1315 0088 00       		.byte	0
 1316 0089 0A       		.uleb128 0xa
 1317 008a 898201   		.uleb128 0x4109
 1318 008d 01       		.byte	0x1
 1319 008e 11       		.uleb128 0x11
 1320 008f 01       		.uleb128 0x1
 1321 0090 31       		.uleb128 0x31
 1322 0091 13       		.uleb128 0x13
 1323 0092 00       		.byte	0
 1324 0093 00       		.byte	0
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 52


 1325 0094 0B       		.uleb128 0xb
 1326 0095 8A8201   		.uleb128 0x410a
 1327 0098 00       		.byte	0
 1328 0099 02       		.uleb128 0x2
 1329 009a 18       		.uleb128 0x18
 1330 009b 9142     		.uleb128 0x2111
 1331 009d 18       		.uleb128 0x18
 1332 009e 00       		.byte	0
 1333 009f 00       		.byte	0
 1334 00a0 0C       		.uleb128 0xc
 1335 00a1 2E       		.uleb128 0x2e
 1336 00a2 00       		.byte	0
 1337 00a3 3F       		.uleb128 0x3f
 1338 00a4 19       		.uleb128 0x19
 1339 00a5 03       		.uleb128 0x3
 1340 00a6 0E       		.uleb128 0xe
 1341 00a7 3A       		.uleb128 0x3a
 1342 00a8 0B       		.uleb128 0xb
 1343 00a9 3B       		.uleb128 0x3b
 1344 00aa 05       		.uleb128 0x5
 1345 00ab 27       		.uleb128 0x27
 1346 00ac 19       		.uleb128 0x19
 1347 00ad 49       		.uleb128 0x49
 1348 00ae 13       		.uleb128 0x13
 1349 00af 11       		.uleb128 0x11
 1350 00b0 01       		.uleb128 0x1
 1351 00b1 12       		.uleb128 0x12
 1352 00b2 06       		.uleb128 0x6
 1353 00b3 40       		.uleb128 0x40
 1354 00b4 18       		.uleb128 0x18
 1355 00b5 9742     		.uleb128 0x2117
 1356 00b7 19       		.uleb128 0x19
 1357 00b8 00       		.byte	0
 1358 00b9 00       		.byte	0
 1359 00ba 0D       		.uleb128 0xd
 1360 00bb 2E       		.uleb128 0x2e
 1361 00bc 01       		.byte	0x1
 1362 00bd 3F       		.uleb128 0x3f
 1363 00be 19       		.uleb128 0x19
 1364 00bf 03       		.uleb128 0x3
 1365 00c0 0E       		.uleb128 0xe
 1366 00c1 3A       		.uleb128 0x3a
 1367 00c2 0B       		.uleb128 0xb
 1368 00c3 3B       		.uleb128 0x3b
 1369 00c4 05       		.uleb128 0x5
 1370 00c5 27       		.uleb128 0x27
 1371 00c6 19       		.uleb128 0x19
 1372 00c7 11       		.uleb128 0x11
 1373 00c8 01       		.uleb128 0x1
 1374 00c9 12       		.uleb128 0x12
 1375 00ca 06       		.uleb128 0x6
 1376 00cb 40       		.uleb128 0x40
 1377 00cc 18       		.uleb128 0x18
 1378 00cd 9742     		.uleb128 0x2117
 1379 00cf 19       		.uleb128 0x19
 1380 00d0 01       		.uleb128 0x1
 1381 00d1 13       		.uleb128 0x13
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 53


 1382 00d2 00       		.byte	0
 1383 00d3 00       		.byte	0
 1384 00d4 0E       		.uleb128 0xe
 1385 00d5 05       		.uleb128 0x5
 1386 00d6 00       		.byte	0
 1387 00d7 03       		.uleb128 0x3
 1388 00d8 0E       		.uleb128 0xe
 1389 00d9 3A       		.uleb128 0x3a
 1390 00da 0B       		.uleb128 0xb
 1391 00db 3B       		.uleb128 0x3b
 1392 00dc 05       		.uleb128 0x5
 1393 00dd 49       		.uleb128 0x49
 1394 00de 13       		.uleb128 0x13
 1395 00df 02       		.uleb128 0x2
 1396 00e0 18       		.uleb128 0x18
 1397 00e1 00       		.byte	0
 1398 00e2 00       		.byte	0
 1399 00e3 0F       		.uleb128 0xf
 1400 00e4 05       		.uleb128 0x5
 1401 00e5 00       		.byte	0
 1402 00e6 03       		.uleb128 0x3
 1403 00e7 0E       		.uleb128 0xe
 1404 00e8 3A       		.uleb128 0x3a
 1405 00e9 0B       		.uleb128 0xb
 1406 00ea 3B       		.uleb128 0x3b
 1407 00eb 05       		.uleb128 0x5
 1408 00ec 49       		.uleb128 0x49
 1409 00ed 13       		.uleb128 0x13
 1410 00ee 02       		.uleb128 0x2
 1411 00ef 17       		.uleb128 0x17
 1412 00f0 00       		.byte	0
 1413 00f1 00       		.byte	0
 1414 00f2 10       		.uleb128 0x10
 1415 00f3 34       		.uleb128 0x34
 1416 00f4 00       		.byte	0
 1417 00f5 03       		.uleb128 0x3
 1418 00f6 0E       		.uleb128 0xe
 1419 00f7 3A       		.uleb128 0x3a
 1420 00f8 0B       		.uleb128 0xb
 1421 00f9 3B       		.uleb128 0x3b
 1422 00fa 05       		.uleb128 0x5
 1423 00fb 49       		.uleb128 0x49
 1424 00fc 13       		.uleb128 0x13
 1425 00fd 02       		.uleb128 0x2
 1426 00fe 17       		.uleb128 0x17
 1427 00ff 00       		.byte	0
 1428 0100 00       		.byte	0
 1429 0101 11       		.uleb128 0x11
 1430 0102 0F       		.uleb128 0xf
 1431 0103 00       		.byte	0
 1432 0104 0B       		.uleb128 0xb
 1433 0105 0B       		.uleb128 0xb
 1434 0106 49       		.uleb128 0x49
 1435 0107 13       		.uleb128 0x13
 1436 0108 00       		.byte	0
 1437 0109 00       		.byte	0
 1438 010a 12       		.uleb128 0x12
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 54


 1439 010b 26       		.uleb128 0x26
 1440 010c 00       		.byte	0
 1441 010d 49       		.uleb128 0x49
 1442 010e 13       		.uleb128 0x13
 1443 010f 00       		.byte	0
 1444 0110 00       		.byte	0
 1445 0111 13       		.uleb128 0x13
 1446 0112 898201   		.uleb128 0x4109
 1447 0115 01       		.byte	0x1
 1448 0116 11       		.uleb128 0x11
 1449 0117 01       		.uleb128 0x1
 1450 0118 31       		.uleb128 0x31
 1451 0119 13       		.uleb128 0x13
 1452 011a 01       		.uleb128 0x1
 1453 011b 13       		.uleb128 0x13
 1454 011c 00       		.byte	0
 1455 011d 00       		.byte	0
 1456 011e 14       		.uleb128 0x14
 1457 011f 2E       		.uleb128 0x2e
 1458 0120 01       		.byte	0x1
 1459 0121 3F       		.uleb128 0x3f
 1460 0122 19       		.uleb128 0x19
 1461 0123 03       		.uleb128 0x3
 1462 0124 0E       		.uleb128 0xe
 1463 0125 3A       		.uleb128 0x3a
 1464 0126 0B       		.uleb128 0xb
 1465 0127 3B       		.uleb128 0x3b
 1466 0128 05       		.uleb128 0x5
 1467 0129 27       		.uleb128 0x27
 1468 012a 19       		.uleb128 0x19
 1469 012b 49       		.uleb128 0x49
 1470 012c 13       		.uleb128 0x13
 1471 012d 11       		.uleb128 0x11
 1472 012e 01       		.uleb128 0x1
 1473 012f 12       		.uleb128 0x12
 1474 0130 06       		.uleb128 0x6
 1475 0131 40       		.uleb128 0x40
 1476 0132 18       		.uleb128 0x18
 1477 0133 9742     		.uleb128 0x2117
 1478 0135 19       		.uleb128 0x19
 1479 0136 01       		.uleb128 0x1
 1480 0137 13       		.uleb128 0x13
 1481 0138 00       		.byte	0
 1482 0139 00       		.byte	0
 1483 013a 15       		.uleb128 0x15
 1484 013b 0B       		.uleb128 0xb
 1485 013c 01       		.byte	0x1
 1486 013d 11       		.uleb128 0x11
 1487 013e 01       		.uleb128 0x1
 1488 013f 12       		.uleb128 0x12
 1489 0140 06       		.uleb128 0x6
 1490 0141 00       		.byte	0
 1491 0142 00       		.byte	0
 1492 0143 16       		.uleb128 0x16
 1493 0144 34       		.uleb128 0x34
 1494 0145 00       		.byte	0
 1495 0146 03       		.uleb128 0x3
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 55


 1496 0147 0E       		.uleb128 0xe
 1497 0148 3A       		.uleb128 0x3a
 1498 0149 0B       		.uleb128 0xb
 1499 014a 3B       		.uleb128 0x3b
 1500 014b 05       		.uleb128 0x5
 1501 014c 49       		.uleb128 0x49
 1502 014d 13       		.uleb128 0x13
 1503 014e 02       		.uleb128 0x2
 1504 014f 18       		.uleb128 0x18
 1505 0150 00       		.byte	0
 1506 0151 00       		.byte	0
 1507 0152 17       		.uleb128 0x17
 1508 0153 34       		.uleb128 0x34
 1509 0154 00       		.byte	0
 1510 0155 03       		.uleb128 0x3
 1511 0156 0E       		.uleb128 0xe
 1512 0157 3A       		.uleb128 0x3a
 1513 0158 0B       		.uleb128 0xb
 1514 0159 3B       		.uleb128 0x3b
 1515 015a 0B       		.uleb128 0xb
 1516 015b 49       		.uleb128 0x49
 1517 015c 13       		.uleb128 0x13
 1518 015d 3F       		.uleb128 0x3f
 1519 015e 19       		.uleb128 0x19
 1520 015f 02       		.uleb128 0x2
 1521 0160 18       		.uleb128 0x18
 1522 0161 00       		.byte	0
 1523 0162 00       		.byte	0
 1524 0163 18       		.uleb128 0x18
 1525 0164 2E       		.uleb128 0x2e
 1526 0165 00       		.byte	0
 1527 0166 3F       		.uleb128 0x3f
 1528 0167 19       		.uleb128 0x19
 1529 0168 03       		.uleb128 0x3
 1530 0169 0E       		.uleb128 0xe
 1531 016a 3A       		.uleb128 0x3a
 1532 016b 0B       		.uleb128 0xb
 1533 016c 3B       		.uleb128 0x3b
 1534 016d 0B       		.uleb128 0xb
 1535 016e 27       		.uleb128 0x27
 1536 016f 19       		.uleb128 0x19
 1537 0170 49       		.uleb128 0x49
 1538 0171 13       		.uleb128 0x13
 1539 0172 3C       		.uleb128 0x3c
 1540 0173 19       		.uleb128 0x19
 1541 0174 00       		.byte	0
 1542 0175 00       		.byte	0
 1543 0176 19       		.uleb128 0x19
 1544 0177 2E       		.uleb128 0x2e
 1545 0178 00       		.byte	0
 1546 0179 3F       		.uleb128 0x3f
 1547 017a 19       		.uleb128 0x19
 1548 017b 03       		.uleb128 0x3
 1549 017c 0E       		.uleb128 0xe
 1550 017d 3A       		.uleb128 0x3a
 1551 017e 0B       		.uleb128 0xb
 1552 017f 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 56


 1553 0180 0B       		.uleb128 0xb
 1554 0181 27       		.uleb128 0x27
 1555 0182 19       		.uleb128 0x19
 1556 0183 3C       		.uleb128 0x3c
 1557 0184 19       		.uleb128 0x19
 1558 0185 00       		.byte	0
 1559 0186 00       		.byte	0
 1560 0187 1A       		.uleb128 0x1a
 1561 0188 2E       		.uleb128 0x2e
 1562 0189 01       		.byte	0x1
 1563 018a 3F       		.uleb128 0x3f
 1564 018b 19       		.uleb128 0x19
 1565 018c 03       		.uleb128 0x3
 1566 018d 0E       		.uleb128 0xe
 1567 018e 3A       		.uleb128 0x3a
 1568 018f 0B       		.uleb128 0xb
 1569 0190 3B       		.uleb128 0x3b
 1570 0191 0B       		.uleb128 0xb
 1571 0192 27       		.uleb128 0x27
 1572 0193 19       		.uleb128 0x19
 1573 0194 3C       		.uleb128 0x3c
 1574 0195 19       		.uleb128 0x19
 1575 0196 01       		.uleb128 0x1
 1576 0197 13       		.uleb128 0x13
 1577 0198 00       		.byte	0
 1578 0199 00       		.byte	0
 1579 019a 1B       		.uleb128 0x1b
 1580 019b 05       		.uleb128 0x5
 1581 019c 00       		.byte	0
 1582 019d 49       		.uleb128 0x49
 1583 019e 13       		.uleb128 0x13
 1584 019f 00       		.byte	0
 1585 01a0 00       		.byte	0
 1586 01a1 00       		.byte	0
 1587              		.section	.debug_loc,"",%progbits
 1588              	.Ldebug_loc0:
 1589              	.LLST0:
 1590 0000 08000000 		.4byte	.LVL1
 1591 0004 1E000000 		.4byte	.LVL4
 1592 0008 0100     		.2byte	0x1
 1593 000a 54       		.byte	0x54
 1594 000b 00000000 		.4byte	0
 1595 000f 00000000 		.4byte	0
 1596              	.LLST1:
 1597 0013 08000000 		.4byte	.LVL8
 1598 0017 1E000000 		.4byte	.LVL11
 1599 001b 0100     		.2byte	0x1
 1600 001d 54       		.byte	0x54
 1601 001e 00000000 		.4byte	0
 1602 0022 00000000 		.4byte	0
 1603              	.LLST2:
 1604 0026 00000000 		.4byte	.LVL16
 1605 002a 0A000000 		.4byte	.LVL18
 1606 002e 0100     		.2byte	0x1
 1607 0030 50       		.byte	0x50
 1608 0031 0A000000 		.4byte	.LVL18
 1609 0035 14000000 		.4byte	.LVL22
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 57


 1610 0039 0100     		.2byte	0x1
 1611 003b 55       		.byte	0x55
 1612 003c 14000000 		.4byte	.LVL22
 1613 0040 18000000 		.4byte	.LVL23
 1614 0044 0100     		.2byte	0x1
 1615 0046 50       		.byte	0x50
 1616 0047 18000000 		.4byte	.LVL23
 1617 004b 20000000 		.4byte	.LVL24
 1618 004f 0100     		.2byte	0x1
 1619 0051 55       		.byte	0x55
 1620 0052 20000000 		.4byte	.LVL24
 1621 0056 24000000 		.4byte	.LFE10
 1622 005a 0400     		.2byte	0x4
 1623 005c F3       		.byte	0xf3
 1624 005d 01       		.uleb128 0x1
 1625 005e 50       		.byte	0x50
 1626 005f 9F       		.byte	0x9f
 1627 0060 00000000 		.4byte	0
 1628 0064 00000000 		.4byte	0
 1629              	.LLST3:
 1630 0068 02000000 		.4byte	.LVL17
 1631 006c 0A000000 		.4byte	.LVL18
 1632 0070 0200     		.2byte	0x2
 1633 0072 30       		.byte	0x30
 1634 0073 9F       		.byte	0x9f
 1635 0074 0A000000 		.4byte	.LVL18
 1636 0078 10000000 		.4byte	.LVL20
 1637 007c 0100     		.2byte	0x1
 1638 007e 54       		.byte	0x54
 1639 007f 12000000 		.4byte	.LVL21
 1640 0083 14000000 		.4byte	.LVL22
 1641 0087 0100     		.2byte	0x1
 1642 0089 54       		.byte	0x54
 1643 008a 14000000 		.4byte	.LVL22
 1644 008e 18000000 		.4byte	.LVL23
 1645 0092 0200     		.2byte	0x2
 1646 0094 30       		.byte	0x30
 1647 0095 9F       		.byte	0x9f
 1648 0096 18000000 		.4byte	.LVL23
 1649 009a 20000000 		.4byte	.LVL24
 1650 009e 0100     		.2byte	0x1
 1651 00a0 54       		.byte	0x54
 1652 00a1 00000000 		.4byte	0
 1653 00a5 00000000 		.4byte	0
 1654              	.LLST4:
 1655 00a9 00000000 		.4byte	.LVL25
 1656 00ad 08000000 		.4byte	.LVL26
 1657 00b1 0100     		.2byte	0x1
 1658 00b3 50       		.byte	0x50
 1659 00b4 08000000 		.4byte	.LVL26
 1660 00b8 14000000 		.4byte	.LVL30
 1661 00bc 0100     		.2byte	0x1
 1662 00be 56       		.byte	0x56
 1663 00bf 14000000 		.4byte	.LVL30
 1664 00c3 1C000000 		.4byte	.LVL31
 1665 00c7 0100     		.2byte	0x1
 1666 00c9 50       		.byte	0x50
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 58


 1667 00ca 1C000000 		.4byte	.LVL31
 1668 00ce 22000000 		.4byte	.LVL32
 1669 00d2 0100     		.2byte	0x1
 1670 00d4 56       		.byte	0x56
 1671 00d5 22000000 		.4byte	.LVL32
 1672 00d9 28000000 		.4byte	.LFE11
 1673 00dd 0400     		.2byte	0x4
 1674 00df F3       		.byte	0xf3
 1675 00e0 01       		.uleb128 0x1
 1676 00e1 50       		.byte	0x50
 1677 00e2 9F       		.byte	0x9f
 1678 00e3 00000000 		.4byte	0
 1679 00e7 00000000 		.4byte	0
 1680              	.LLST5:
 1681 00eb 00000000 		.4byte	.LVL25
 1682 00ef 08000000 		.4byte	.LVL26
 1683 00f3 0100     		.2byte	0x1
 1684 00f5 51       		.byte	0x51
 1685 00f6 08000000 		.4byte	.LVL26
 1686 00fa 14000000 		.4byte	.LVL30
 1687 00fe 0400     		.2byte	0x4
 1688 0100 F3       		.byte	0xf3
 1689 0101 01       		.uleb128 0x1
 1690 0102 51       		.byte	0x51
 1691 0103 9F       		.byte	0x9f
 1692 0104 14000000 		.4byte	.LVL30
 1693 0108 1C000000 		.4byte	.LVL31
 1694 010c 0100     		.2byte	0x1
 1695 010e 51       		.byte	0x51
 1696 010f 1C000000 		.4byte	.LVL31
 1697 0113 28000000 		.4byte	.LFE11
 1698 0117 0400     		.2byte	0x4
 1699 0119 F3       		.byte	0xf3
 1700 011a 01       		.uleb128 0x1
 1701 011b 51       		.byte	0x51
 1702 011c 9F       		.byte	0x9f
 1703 011d 00000000 		.4byte	0
 1704 0121 00000000 		.4byte	0
 1705              	.LLST6:
 1706 0125 00000000 		.4byte	.LVL25
 1707 0129 08000000 		.4byte	.LVL26
 1708 012d 0200     		.2byte	0x2
 1709 012f 30       		.byte	0x30
 1710 0130 9F       		.byte	0x9f
 1711 0131 08000000 		.4byte	.LVL26
 1712 0135 10000000 		.4byte	.LVL28
 1713 0139 0100     		.2byte	0x1
 1714 013b 54       		.byte	0x54
 1715 013c 12000000 		.4byte	.LVL29
 1716 0140 14000000 		.4byte	.LVL30
 1717 0144 0100     		.2byte	0x1
 1718 0146 54       		.byte	0x54
 1719 0147 14000000 		.4byte	.LVL30
 1720 014b 1C000000 		.4byte	.LVL31
 1721 014f 0200     		.2byte	0x2
 1722 0151 30       		.byte	0x30
 1723 0152 9F       		.byte	0x9f
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 59


 1724 0153 1C000000 		.4byte	.LVL31
 1725 0157 22000000 		.4byte	.LVL32
 1726 015b 0100     		.2byte	0x1
 1727 015d 54       		.byte	0x54
 1728 015e 00000000 		.4byte	0
 1729 0162 00000000 		.4byte	0
 1730              	.LLST7:
 1731 0166 00000000 		.4byte	.LVL33
 1732 016a 0B000000 		.4byte	.LVL34-1
 1733 016e 0100     		.2byte	0x1
 1734 0170 50       		.byte	0x50
 1735 0171 0B000000 		.4byte	.LVL34-1
 1736 0175 20000000 		.4byte	.LFE12
 1737 0179 0400     		.2byte	0x4
 1738 017b F3       		.byte	0xf3
 1739 017c 01       		.uleb128 0x1
 1740 017d 50       		.byte	0x50
 1741 017e 9F       		.byte	0x9f
 1742 017f 00000000 		.4byte	0
 1743 0183 00000000 		.4byte	0
 1744              	.LLST8:
 1745 0187 06000000 		.4byte	.LVL37
 1746 018b 1C000000 		.4byte	.LVL38
 1747 018f 0100     		.2byte	0x1
 1748 0191 53       		.byte	0x53
 1749 0192 1C000000 		.4byte	.LVL38
 1750 0196 24000000 		.4byte	.LFE13
 1751 019a 0100     		.2byte	0x1
 1752 019c 50       		.byte	0x50
 1753 019d 00000000 		.4byte	0
 1754 01a1 00000000 		.4byte	0
 1755              	.LLST9:
 1756 01a5 06000000 		.4byte	.LVL39
 1757 01a9 1B000000 		.4byte	.LVL40-1
 1758 01ad 0100     		.2byte	0x1
 1759 01af 50       		.byte	0x50
 1760 01b0 00000000 		.4byte	0
 1761 01b4 00000000 		.4byte	0
 1762              	.LLST10:
 1763 01b8 00000000 		.4byte	.LVL41
 1764 01bc 3C000000 		.4byte	.LVL46
 1765 01c0 0100     		.2byte	0x1
 1766 01c2 50       		.byte	0x50
 1767 01c3 3C000000 		.4byte	.LVL46
 1768 01c7 58000000 		.4byte	.LFE15
 1769 01cb 0400     		.2byte	0x4
 1770 01cd F3       		.byte	0xf3
 1771 01ce 01       		.uleb128 0x1
 1772 01cf 50       		.byte	0x50
 1773 01d0 9F       		.byte	0x9f
 1774 01d1 00000000 		.4byte	0
 1775 01d5 00000000 		.4byte	0
 1776              	.LLST11:
 1777 01d9 22000000 		.4byte	.LVL42
 1778 01dd 28000000 		.4byte	.LVL43
 1779 01e1 0100     		.2byte	0x1
 1780 01e3 53       		.byte	0x53
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 60


 1781 01e4 34000000 		.4byte	.LVL44
 1782 01e8 3A000000 		.4byte	.LVL45
 1783 01ec 0100     		.2byte	0x1
 1784 01ee 53       		.byte	0x53
 1785 01ef 00000000 		.4byte	0
 1786 01f3 00000000 		.4byte	0
 1787              		.section	.debug_aranges,"",%progbits
 1788 0000 9C000000 		.4byte	0x9c
 1789 0004 0200     		.2byte	0x2
 1790 0006 00000000 		.4byte	.Ldebug_info0
 1791 000a 04       		.byte	0x4
 1792 000b 00       		.byte	0
 1793 000c 0000     		.2byte	0
 1794 000e 0000     		.2byte	0
 1795 0010 00000000 		.4byte	.LFB1
 1796 0014 18000000 		.4byte	.LFE1-.LFB1
 1797 0018 00000000 		.4byte	.LFB2
 1798 001c 24000000 		.4byte	.LFE2-.LFB2
 1799 0020 00000000 		.4byte	.LFB0
 1800 0024 1C000000 		.4byte	.LFE0-.LFB0
 1801 0028 00000000 		.4byte	.LFB3
 1802 002c 24000000 		.4byte	.LFE3-.LFB3
 1803 0030 00000000 		.4byte	.LFB4
 1804 0034 04000000 		.4byte	.LFE4-.LFB4
 1805 0038 00000000 		.4byte	.LFB5
 1806 003c 02000000 		.4byte	.LFE5-.LFB5
 1807 0040 00000000 		.4byte	.LFB6
 1808 0044 0C000000 		.4byte	.LFE6-.LFB6
 1809 0048 00000000 		.4byte	.LFB7
 1810 004c 14000000 		.4byte	.LFE7-.LFB7
 1811 0050 00000000 		.4byte	.LFB8
 1812 0054 0C000000 		.4byte	.LFE8-.LFB8
 1813 0058 00000000 		.4byte	.LFB9
 1814 005c 18000000 		.4byte	.LFE9-.LFB9
 1815 0060 00000000 		.4byte	.LFB10
 1816 0064 24000000 		.4byte	.LFE10-.LFB10
 1817 0068 00000000 		.4byte	.LFB11
 1818 006c 28000000 		.4byte	.LFE11-.LFB11
 1819 0070 00000000 		.4byte	.LFB12
 1820 0074 20000000 		.4byte	.LFE12-.LFB12
 1821 0078 00000000 		.4byte	.LFB13
 1822 007c 24000000 		.4byte	.LFE13-.LFB13
 1823 0080 00000000 		.4byte	.LFB14
 1824 0084 24000000 		.4byte	.LFE14-.LFB14
 1825 0088 00000000 		.4byte	.LFB15
 1826 008c 58000000 		.4byte	.LFE15-.LFB15
 1827 0090 00000000 		.4byte	.LFB16
 1828 0094 02000000 		.4byte	.LFE16-.LFB16
 1829 0098 00000000 		.4byte	0
 1830 009c 00000000 		.4byte	0
 1831              		.section	.debug_ranges,"",%progbits
 1832              	.Ldebug_ranges0:
 1833 0000 00000000 		.4byte	.LFB1
 1834 0004 18000000 		.4byte	.LFE1
 1835 0008 00000000 		.4byte	.LFB2
 1836 000c 24000000 		.4byte	.LFE2
 1837 0010 00000000 		.4byte	.LFB0
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 61


 1838 0014 1C000000 		.4byte	.LFE0
 1839 0018 00000000 		.4byte	.LFB3
 1840 001c 24000000 		.4byte	.LFE3
 1841 0020 00000000 		.4byte	.LFB4
 1842 0024 04000000 		.4byte	.LFE4
 1843 0028 00000000 		.4byte	.LFB5
 1844 002c 02000000 		.4byte	.LFE5
 1845 0030 00000000 		.4byte	.LFB6
 1846 0034 0C000000 		.4byte	.LFE6
 1847 0038 00000000 		.4byte	.LFB7
 1848 003c 14000000 		.4byte	.LFE7
 1849 0040 00000000 		.4byte	.LFB8
 1850 0044 0C000000 		.4byte	.LFE8
 1851 0048 00000000 		.4byte	.LFB9
 1852 004c 18000000 		.4byte	.LFE9
 1853 0050 00000000 		.4byte	.LFB10
 1854 0054 24000000 		.4byte	.LFE10
 1855 0058 00000000 		.4byte	.LFB11
 1856 005c 28000000 		.4byte	.LFE11
 1857 0060 00000000 		.4byte	.LFB12
 1858 0064 20000000 		.4byte	.LFE12
 1859 0068 00000000 		.4byte	.LFB13
 1860 006c 24000000 		.4byte	.LFE13
 1861 0070 00000000 		.4byte	.LFB14
 1862 0074 24000000 		.4byte	.LFE14
 1863 0078 00000000 		.4byte	.LFB15
 1864 007c 58000000 		.4byte	.LFE15
 1865 0080 00000000 		.4byte	.LFB16
 1866 0084 02000000 		.4byte	.LFE16
 1867 0088 00000000 		.4byte	0
 1868 008c 00000000 		.4byte	0
 1869              		.section	.debug_line,"",%progbits
 1870              	.Ldebug_line0:
 1871 0000 EE010000 		.section	.debug_str,"MS",%progbits,1
 1871      02006100 
 1871      00000201 
 1871      FB0E0D00 
 1871      01010101 
 1872              	.LASF6:
 1873 0000 6C6F6E67 		.ascii	"long long int\000"
 1873      206C6F6E 
 1873      6720696E 
 1873      7400
 1874              	.LASF41:
 1875 000e 74785065 		.ascii	"txPeriod\000"
 1875      72696F64 
 1875      00
 1876              	.LASF13:
 1877 0017 63686172 		.ascii	"char8\000"
 1877      3800
 1878              	.LASF50:
 1879 001d 55415254 		.ascii	"UART_GetTxBufferSize\000"
 1879      5F476574 
 1879      54784275 
 1879      66666572 
 1879      53697A65 
 1880              	.LASF40:
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 62


 1881 0032 746D7053 		.ascii	"tmpStat\000"
 1881      74617400 
 1882              	.LASF42:
 1883 003a 55415254 		.ascii	"UART_SetTxAddressMode\000"
 1883      5F536574 
 1883      54784164 
 1883      64726573 
 1883      734D6F64 
 1884              	.LASF3:
 1885 0050 73686F72 		.ascii	"short unsigned int\000"
 1885      7420756E 
 1885      7369676E 
 1885      65642069 
 1885      6E7400
 1886              	.LASF19:
 1887 0063 55415254 		.ascii	"UART_Stop\000"
 1887      5F53746F 
 1887      7000
 1888              	.LASF51:
 1889 006d 55415254 		.ascii	"UART_initVar\000"
 1889      5F696E69 
 1889      74566172 
 1889      00
 1890              	.LASF31:
 1891 007a 73747269 		.ascii	"string\000"
 1891      6E6700
 1892              	.LASF44:
 1893 0081 55415254 		.ascii	"UART_IntClock_Start\000"
 1893      5F496E74 
 1893      436C6F63 
 1893      6B5F5374 
 1893      61727400 
 1894              	.LASF11:
 1895 0095 666C6F61 		.ascii	"float\000"
 1895      7400
 1896              	.LASF7:
 1897 009b 6C6F6E67 		.ascii	"long long unsigned int\000"
 1897      206C6F6E 
 1897      6720756E 
 1897      7369676E 
 1897      65642069 
 1898              	.LASF43:
 1899 00b2 61646472 		.ascii	"addressMode\000"
 1899      6573734D 
 1899      6F646500 
 1900              	.LASF49:
 1901 00be 55415254 		.ascii	"UART_Init\000"
 1901      5F496E69 
 1901      7400
 1902              	.LASF15:
 1903 00c8 72656738 		.ascii	"reg8\000"
 1903      00
 1904              	.LASF48:
 1905 00cd 433A5C55 		.ascii	"C:\\Users\\Ian\\Documents\\Junior\\Senior Project C"
 1905      73657273 
 1905      5C49616E 
 1905      5C446F63 
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 63


 1905      756D656E 
 1906 00fb 68697020 		.ascii	"hip Design\\Wave Generator\\Wave Generator.cydsn\000"
 1906      44657369 
 1906      676E5C57 
 1906      61766520 
 1906      47656E65 
 1907              	.LASF5:
 1908 012a 6C6F6E67 		.ascii	"long unsigned int\000"
 1908      20756E73 
 1908      69676E65 
 1908      6420696E 
 1908      7400
 1909              	.LASF47:
 1910 013c 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\UART.c\000"
 1910      6E657261 
 1910      7465645F 
 1910      536F7572 
 1910      63655C50 
 1911              	.LASF18:
 1912 015c 55415254 		.ascii	"UART_Start\000"
 1912      5F537461 
 1912      727400
 1913              	.LASF33:
 1914 0167 55415254 		.ascii	"UART_PutArray\000"
 1914      5F507574 
 1914      41727261 
 1914      7900
 1915              	.LASF34:
 1916 0175 62797465 		.ascii	"byteCount\000"
 1916      436F756E 
 1916      7400
 1917              	.LASF20:
 1918 017f 656E6162 		.ascii	"enableInterrupts\000"
 1918      6C65496E 
 1918      74657272 
 1918      75707473 
 1918      00
 1919              	.LASF1:
 1920 0190 756E7369 		.ascii	"unsigned char\000"
 1920      676E6564 
 1920      20636861 
 1920      7200
 1921              	.LASF12:
 1922 019e 646F7562 		.ascii	"double\000"
 1922      6C6500
 1923              	.LASF24:
 1924 01a5 696E7453 		.ascii	"intSrc\000"
 1924      726300
 1925              	.LASF10:
 1926 01ac 75696E74 		.ascii	"uint16\000"
 1926      313600
 1927              	.LASF38:
 1928 01b3 55415254 		.ascii	"UART_SendBreak\000"
 1928      5F53656E 
 1928      64427265 
 1928      616B00
 1929              	.LASF46:
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 64


 1930 01c2 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1930      4320342E 
 1930      392E3320 
 1930      32303135 
 1930      30333033 
 1931 01f5 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1931      20726576 
 1931      6973696F 
 1931      6E203232 
 1931      31323230 
 1932 0228 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1932      66756E63 
 1932      74696F6E 
 1932      2D736563 
 1932      74696F6E 
 1933              	.LASF52:
 1934 0250 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1934      74657243 
 1934      72697469 
 1934      63616C53 
 1934      65637469 
 1935              	.LASF8:
 1936 0267 756E7369 		.ascii	"unsigned int\000"
 1936      676E6564 
 1936      20696E74 
 1936      00
 1937              	.LASF21:
 1938 0274 55415254 		.ascii	"UART_WriteControlRegister\000"
 1938      5F577269 
 1938      7465436F 
 1938      6E74726F 
 1938      6C526567 
 1939              	.LASF28:
 1940 028e 55415254 		.ascii	"UART_ReadTxStatus\000"
 1940      5F526561 
 1940      64547853 
 1940      74617475 
 1940      7300
 1941              	.LASF53:
 1942 02a0 43794578 		.ascii	"CyExitCriticalSection\000"
 1942      69744372 
 1942      69746963 
 1942      616C5365 
 1942      6374696F 
 1943              	.LASF27:
 1944 02b6 55415254 		.ascii	"UART_ReadControlRegister\000"
 1944      5F526561 
 1944      64436F6E 
 1944      74726F6C 
 1944      52656769 
 1945              	.LASF35:
 1946 02cf 55415254 		.ascii	"UART_PutCRLF\000"
 1946      5F507574 
 1946      43524C46 
 1946      00
 1947              	.LASF32:
 1948 02dc 62756649 		.ascii	"bufIndex\000"
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 65


 1948      6E646578 
 1948      00
 1949              	.LASF22:
 1950 02e5 55415254 		.ascii	"UART_SetTxInterruptMode\000"
 1950      5F536574 
 1950      5478496E 
 1950      74657272 
 1950      7570744D 
 1951              	.LASF29:
 1952 02fd 55415254 		.ascii	"UART_PutChar\000"
 1952      5F507574 
 1952      43686172 
 1952      00
 1953              	.LASF45:
 1954 030a 55415254 		.ascii	"UART_IntClock_Stop\000"
 1954      5F496E74 
 1954      436C6F63 
 1954      6B5F5374 
 1954      6F7000
 1955              	.LASF16:
 1956 031d 73697A65 		.ascii	"sizetype\000"
 1956      74797065 
 1956      00
 1957              	.LASF26:
 1958 0326 74784461 		.ascii	"txDataByte\000"
 1958      74614279 
 1958      746500
 1959              	.LASF14:
 1960 0331 63686172 		.ascii	"char\000"
 1960      00
 1961              	.LASF25:
 1962 0336 55415254 		.ascii	"UART_WriteTxData\000"
 1962      5F577269 
 1962      74655478 
 1962      44617461 
 1962      00
 1963              	.LASF39:
 1964 0347 7265744D 		.ascii	"retMode\000"
 1964      6F646500 
 1965              	.LASF2:
 1966 034f 73686F72 		.ascii	"short int\000"
 1966      7420696E 
 1966      7400
 1967              	.LASF37:
 1968 0359 55415254 		.ascii	"UART_ClearTxBuffer\000"
 1968      5F436C65 
 1968      61725478 
 1968      42756666 
 1968      657200
 1969              	.LASF9:
 1970 036c 75696E74 		.ascii	"uint8\000"
 1970      3800
 1971              	.LASF23:
 1972 0372 636F6E74 		.ascii	"control\000"
 1972      726F6C00 
 1973              	.LASF4:
 1974 037a 6C6F6E67 		.ascii	"long int\000"
ARM GAS  C:\Users\Ian\AppData\Local\Temp\cc5Q66P0.s 			page 66


 1974      20696E74 
 1974      00
 1975              	.LASF17:
 1976 0383 55415254 		.ascii	"UART_Enable\000"
 1976      5F456E61 
 1976      626C6500 
 1977              	.LASF0:
 1978 038f 7369676E 		.ascii	"signed char\000"
 1978      65642063 
 1978      68617200 
 1979              	.LASF30:
 1980 039b 55415254 		.ascii	"UART_PutString\000"
 1980      5F507574 
 1980      53747269 
 1980      6E6700
 1981              	.LASF36:
 1982 03aa 73697A65 		.ascii	"size\000"
 1982      00
 1983              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
